name: check_latest_release

on:
  release:
    types: [released]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release_tag:
        description: The GitHub release tag corresponding to the PyPI releases to test
        required: true
        default: non-existent-tag
  
jobs:
  install-module-and-run-examples:
    name: example_test
    if: github.repository == 'ni/nimi-python'
    # Use win32 nimibot
    # win64 already handles post-commit testing for coverage
    # linux doesn't support all modules
    runs-on:
      - self-hosted
      - windows
      - x64
      - rdss-nimibot-win-10-py32
    timeout-minutes: 30
    steps:
      - name: checkout repository
        uses: actions/checkout@v3

      - name: Extract module name and version from release tag
        id: extract_tag
        run: |
          # Extract module name and version from the release tag
          # Assuming the tag format is <module_name>-<version>, e.g., nidigital-1.4.0
          TAG="${{ github.event_name == 'workflow_dispatch' && inputs.release_tag || github.event.release.tag_name }}"
          MODULE_NAME=$(echo "$TAG" | cut -d'-' -f1)
          MODULE_VERSION=$(echo "$TAG" | cut -d'-' -f2-)
          echo "module_name=$MODULE_NAME" >> "$GITHUB_OUTPUT"
          echo "module_version=$MODULE_VERSION" >> "$GITHUB_OUTPUT"
      # NOTE: we don't upload test coverage for this
      - name: run examples using PyPI uploads
        uses: ./.github/actions/run_examples_using_pypi_uploads
        with:
          module_name: ${{ steps.extract_tag.outputs.module_name }}
          module_version: ${{ steps.extract_tag.outputs.module_version }}