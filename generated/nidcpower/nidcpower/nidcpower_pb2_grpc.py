# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import nidcpower_pb2 as nidcpower__pb2


class NiDCPowerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Abort = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/Abort',
                request_serializer=nidcpower__pb2.AbortRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.AbortResponse.FromString,
                )
        self.AbortWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/AbortWithChannels',
                request_serializer=nidcpower__pb2.AbortWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.AbortWithChannelsResponse.FromString,
                )
        self.CalSelfCalibrate = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/CalSelfCalibrate',
                request_serializer=nidcpower__pb2.CalSelfCalibrateRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CalSelfCalibrateResponse.FromString,
                )
        self.ClearError = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ClearError',
                request_serializer=nidcpower__pb2.ClearErrorRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ClearErrorResponse.FromString,
                )
        self.ClearInterchangeWarnings = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ClearInterchangeWarnings',
                request_serializer=nidcpower__pb2.ClearInterchangeWarningsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ClearInterchangeWarningsResponse.FromString,
                )
        self.ClearLatchedOutputCutoffState = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ClearLatchedOutputCutoffState',
                request_serializer=nidcpower__pb2.ClearLatchedOutputCutoffStateRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ClearLatchedOutputCutoffStateResponse.FromString,
                )
        self.Close = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/Close',
                request_serializer=nidcpower__pb2.CloseRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CloseResponse.FromString,
                )
        self.Commit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/Commit',
                request_serializer=nidcpower__pb2.CommitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CommitResponse.FromString,
                )
        self.CommitWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/CommitWithChannels',
                request_serializer=nidcpower__pb2.CommitWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CommitWithChannelsResponse.FromString,
                )
        self.ConfigureApertureTime = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureApertureTime',
                request_serializer=nidcpower__pb2.ConfigureApertureTimeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureApertureTimeResponse.FromString,
                )
        self.ConfigureAutoZero = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureAutoZero',
                request_serializer=nidcpower__pb2.ConfigureAutoZeroRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureAutoZeroResponse.FromString,
                )
        self.ConfigureCurrentLevel = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureCurrentLevel',
                request_serializer=nidcpower__pb2.ConfigureCurrentLevelRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureCurrentLevelResponse.FromString,
                )
        self.ConfigureCurrentLevelRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureCurrentLevelRange',
                request_serializer=nidcpower__pb2.ConfigureCurrentLevelRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureCurrentLevelRangeResponse.FromString,
                )
        self.ConfigureCurrentLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureCurrentLimit',
                request_serializer=nidcpower__pb2.ConfigureCurrentLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureCurrentLimitResponse.FromString,
                )
        self.ConfigureCurrentLimitRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureCurrentLimitRange',
                request_serializer=nidcpower__pb2.ConfigureCurrentLimitRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureCurrentLimitRangeResponse.FromString,
                )
        self.ConfigureDigitalEdgeMeasureTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeMeasureTrigger',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerResponse.FromString,
                )
        self.ConfigureDigitalEdgeMeasureTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeMeasureTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureDigitalEdgePulseTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgePulseTrigger',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerResponse.FromString,
                )
        self.ConfigureDigitalEdgePulseTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgePulseTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureDigitalEdgeSequenceAdvanceTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSequenceAdvanceTrigger',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerResponse.FromString,
                )
        self.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureDigitalEdgeShutdownTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeShutdownTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeShutdownTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeShutdownTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureDigitalEdgeSourceTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSourceTrigger',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerResponse.FromString,
                )
        self.ConfigureDigitalEdgeSourceTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSourceTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureDigitalEdgeStartTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeStartTrigger',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerResponse.FromString,
                )
        self.ConfigureDigitalEdgeStartTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeStartTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureLCRCustomCableCompensation = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureLCRCustomCableCompensation',
                request_serializer=nidcpower__pb2.ConfigureLCRCustomCableCompensationRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureLCRCustomCableCompensationResponse.FromString,
                )
        self.ConfigureOutputEnabled = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureOutputEnabled',
                request_serializer=nidcpower__pb2.ConfigureOutputEnabledRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureOutputEnabledResponse.FromString,
                )
        self.ConfigureOutputFunction = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureOutputFunction',
                request_serializer=nidcpower__pb2.ConfigureOutputFunctionRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureOutputFunctionResponse.FromString,
                )
        self.ConfigureOutputRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureOutputRange',
                request_serializer=nidcpower__pb2.ConfigureOutputRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureOutputRangeResponse.FromString,
                )
        self.ConfigureOutputResistance = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureOutputResistance',
                request_serializer=nidcpower__pb2.ConfigureOutputResistanceRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureOutputResistanceResponse.FromString,
                )
        self.ConfigureOvp = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureOvp',
                request_serializer=nidcpower__pb2.ConfigureOvpRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureOvpResponse.FromString,
                )
        self.ConfigurePowerLineFrequency = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePowerLineFrequency',
                request_serializer=nidcpower__pb2.ConfigurePowerLineFrequencyRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePowerLineFrequencyResponse.FromString,
                )
        self.ConfigurePulseBiasCurrentLevel = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasCurrentLevel',
                request_serializer=nidcpower__pb2.ConfigurePulseBiasCurrentLevelRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseBiasCurrentLevelResponse.FromString,
                )
        self.ConfigurePulseBiasCurrentLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasCurrentLimit',
                request_serializer=nidcpower__pb2.ConfigurePulseBiasCurrentLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseBiasCurrentLimitResponse.FromString,
                )
        self.ConfigurePulseBiasVoltageLevel = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasVoltageLevel',
                request_serializer=nidcpower__pb2.ConfigurePulseBiasVoltageLevelRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseBiasVoltageLevelResponse.FromString,
                )
        self.ConfigurePulseBiasVoltageLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasVoltageLimit',
                request_serializer=nidcpower__pb2.ConfigurePulseBiasVoltageLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseBiasVoltageLimitResponse.FromString,
                )
        self.ConfigurePulseCurrentLevel = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLevel',
                request_serializer=nidcpower__pb2.ConfigurePulseCurrentLevelRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseCurrentLevelResponse.FromString,
                )
        self.ConfigurePulseCurrentLevelRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLevelRange',
                request_serializer=nidcpower__pb2.ConfigurePulseCurrentLevelRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseCurrentLevelRangeResponse.FromString,
                )
        self.ConfigurePulseCurrentLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLimit',
                request_serializer=nidcpower__pb2.ConfigurePulseCurrentLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseCurrentLimitResponse.FromString,
                )
        self.ConfigurePulseCurrentLimitRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLimitRange',
                request_serializer=nidcpower__pb2.ConfigurePulseCurrentLimitRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseCurrentLimitRangeResponse.FromString,
                )
        self.ConfigurePulseVoltageLevel = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLevel',
                request_serializer=nidcpower__pb2.ConfigurePulseVoltageLevelRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseVoltageLevelResponse.FromString,
                )
        self.ConfigurePulseVoltageLevelRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLevelRange',
                request_serializer=nidcpower__pb2.ConfigurePulseVoltageLevelRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseVoltageLevelRangeResponse.FromString,
                )
        self.ConfigurePulseVoltageLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLimit',
                request_serializer=nidcpower__pb2.ConfigurePulseVoltageLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseVoltageLimitResponse.FromString,
                )
        self.ConfigurePulseVoltageLimitRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLimitRange',
                request_serializer=nidcpower__pb2.ConfigurePulseVoltageLimitRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigurePulseVoltageLimitRangeResponse.FromString,
                )
        self.ConfigureSense = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSense',
                request_serializer=nidcpower__pb2.ConfigureSenseRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSenseResponse.FromString,
                )
        self.ConfigureSoftwareEdgeMeasureTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeMeasureTrigger',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerResponse.FromString,
                )
        self.ConfigureSoftwareEdgeMeasureTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeMeasureTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureSoftwareEdgePulseTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgePulseTrigger',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerResponse.FromString,
                )
        self.ConfigureSoftwareEdgePulseTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgePulseTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureSoftwareEdgeSequenceAdvanceTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSequenceAdvanceTrigger',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerResponse.FromString,
                )
        self.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureSoftwareEdgeShutdownTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeShutdownTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeShutdownTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeShutdownTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureSoftwareEdgeSourceTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSourceTrigger',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerResponse.FromString,
                )
        self.ConfigureSoftwareEdgeSourceTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSourceTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureSoftwareEdgeStartTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeStartTrigger',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerResponse.FromString,
                )
        self.ConfigureSoftwareEdgeStartTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeStartTriggerWithChannels',
                request_serializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerWithChannelsResponse.FromString,
                )
        self.ConfigureSourceMode = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSourceMode',
                request_serializer=nidcpower__pb2.ConfigureSourceModeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSourceModeResponse.FromString,
                )
        self.ConfigureSourceModeWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureSourceModeWithChannels',
                request_serializer=nidcpower__pb2.ConfigureSourceModeWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureSourceModeWithChannelsResponse.FromString,
                )
        self.ConfigureVoltageLevel = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureVoltageLevel',
                request_serializer=nidcpower__pb2.ConfigureVoltageLevelRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureVoltageLevelResponse.FromString,
                )
        self.ConfigureVoltageLevelRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureVoltageLevelRange',
                request_serializer=nidcpower__pb2.ConfigureVoltageLevelRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureVoltageLevelRangeResponse.FromString,
                )
        self.ConfigureVoltageLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureVoltageLimit',
                request_serializer=nidcpower__pb2.ConfigureVoltageLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureVoltageLimitResponse.FromString,
                )
        self.ConfigureVoltageLimitRange = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ConfigureVoltageLimitRange',
                request_serializer=nidcpower__pb2.ConfigureVoltageLimitRangeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ConfigureVoltageLimitRangeResponse.FromString,
                )
        self.CreateAdvancedSequence = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/CreateAdvancedSequence',
                request_serializer=nidcpower__pb2.CreateAdvancedSequenceRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CreateAdvancedSequenceResponse.FromString,
                )
        self.CreateAdvancedSequenceCommitStepWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceCommitStepWithChannels',
                request_serializer=nidcpower__pb2.CreateAdvancedSequenceCommitStepWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CreateAdvancedSequenceCommitStepWithChannelsResponse.FromString,
                )
        self.CreateAdvancedSequenceStep = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceStep',
                request_serializer=nidcpower__pb2.CreateAdvancedSequenceStepRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CreateAdvancedSequenceStepResponse.FromString,
                )
        self.CreateAdvancedSequenceStepWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceStepWithChannels',
                request_serializer=nidcpower__pb2.CreateAdvancedSequenceStepWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CreateAdvancedSequenceStepWithChannelsResponse.FromString,
                )
        self.CreateAdvancedSequenceWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceWithChannels',
                request_serializer=nidcpower__pb2.CreateAdvancedSequenceWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.CreateAdvancedSequenceWithChannelsResponse.FromString,
                )
        self.DeleteAdvancedSequence = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DeleteAdvancedSequence',
                request_serializer=nidcpower__pb2.DeleteAdvancedSequenceRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DeleteAdvancedSequenceResponse.FromString,
                )
        self.DeleteAdvancedSequenceWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DeleteAdvancedSequenceWithChannels',
                request_serializer=nidcpower__pb2.DeleteAdvancedSequenceWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DeleteAdvancedSequenceWithChannelsResponse.FromString,
                )
        self.Disable = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/Disable',
                request_serializer=nidcpower__pb2.DisableRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableResponse.FromString,
                )
        self.DisablePulseTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisablePulseTrigger',
                request_serializer=nidcpower__pb2.DisablePulseTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisablePulseTriggerResponse.FromString,
                )
        self.DisablePulseTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisablePulseTriggerWithChannels',
                request_serializer=nidcpower__pb2.DisablePulseTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisablePulseTriggerWithChannelsResponse.FromString,
                )
        self.DisableSequenceAdvanceTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisableSequenceAdvanceTrigger',
                request_serializer=nidcpower__pb2.DisableSequenceAdvanceTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableSequenceAdvanceTriggerResponse.FromString,
                )
        self.DisableSequenceAdvanceTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisableSequenceAdvanceTriggerWithChannels',
                request_serializer=nidcpower__pb2.DisableSequenceAdvanceTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableSequenceAdvanceTriggerWithChannelsResponse.FromString,
                )
        self.DisableShutdownTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisableShutdownTriggerWithChannels',
                request_serializer=nidcpower__pb2.DisableShutdownTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableShutdownTriggerWithChannelsResponse.FromString,
                )
        self.DisableSourceTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisableSourceTrigger',
                request_serializer=nidcpower__pb2.DisableSourceTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableSourceTriggerResponse.FromString,
                )
        self.DisableSourceTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisableSourceTriggerWithChannels',
                request_serializer=nidcpower__pb2.DisableSourceTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableSourceTriggerWithChannelsResponse.FromString,
                )
        self.DisableStartTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisableStartTrigger',
                request_serializer=nidcpower__pb2.DisableStartTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableStartTriggerResponse.FromString,
                )
        self.DisableStartTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/DisableStartTriggerWithChannels',
                request_serializer=nidcpower__pb2.DisableStartTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.DisableStartTriggerWithChannelsResponse.FromString,
                )
        self.ErrorMessage = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ErrorMessage',
                request_serializer=nidcpower__pb2.ErrorMessageRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ErrorMessageResponse.FromString,
                )
        self.ErrorQuery = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ErrorQuery',
                request_serializer=nidcpower__pb2.ErrorQueryRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ErrorQueryResponse.FromString,
                )
        self.ExportAttributeConfigurationBuffer = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ExportAttributeConfigurationBuffer',
                request_serializer=nidcpower__pb2.ExportAttributeConfigurationBufferRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ExportAttributeConfigurationBufferResponse.FromString,
                )
        self.ExportAttributeConfigurationFile = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ExportAttributeConfigurationFile',
                request_serializer=nidcpower__pb2.ExportAttributeConfigurationFileRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ExportAttributeConfigurationFileResponse.FromString,
                )
        self.ExportSignal = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ExportSignal',
                request_serializer=nidcpower__pb2.ExportSignalRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ExportSignalResponse.FromString,
                )
        self.ExportSignalWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ExportSignalWithChannels',
                request_serializer=nidcpower__pb2.ExportSignalWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ExportSignalWithChannelsResponse.FromString,
                )
        self.FetchMultiple = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/FetchMultiple',
                request_serializer=nidcpower__pb2.FetchMultipleRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.FetchMultipleResponse.FromString,
                )
        self.FetchMultipleLCR = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/FetchMultipleLCR',
                request_serializer=nidcpower__pb2.FetchMultipleLCRRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.FetchMultipleLCRResponse.FromString,
                )
        self.GetAttributeViBoolean = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetAttributeViBoolean',
                request_serializer=nidcpower__pb2.GetAttributeViBooleanRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetAttributeViBooleanResponse.FromString,
                )
        self.GetAttributeViInt32 = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetAttributeViInt32',
                request_serializer=nidcpower__pb2.GetAttributeViInt32Request.SerializeToString,
                response_deserializer=nidcpower__pb2.GetAttributeViInt32Response.FromString,
                )
        self.GetAttributeViInt64 = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetAttributeViInt64',
                request_serializer=nidcpower__pb2.GetAttributeViInt64Request.SerializeToString,
                response_deserializer=nidcpower__pb2.GetAttributeViInt64Response.FromString,
                )
        self.GetAttributeViReal64 = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetAttributeViReal64',
                request_serializer=nidcpower__pb2.GetAttributeViReal64Request.SerializeToString,
                response_deserializer=nidcpower__pb2.GetAttributeViReal64Response.FromString,
                )
        self.GetAttributeViSession = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetAttributeViSession',
                request_serializer=nidcpower__pb2.GetAttributeViSessionRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetAttributeViSessionResponse.FromString,
                )
        self.GetAttributeViString = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetAttributeViString',
                request_serializer=nidcpower__pb2.GetAttributeViStringRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetAttributeViStringResponse.FromString,
                )
        self.GetChannelName = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetChannelName',
                request_serializer=nidcpower__pb2.GetChannelNameRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetChannelNameResponse.FromString,
                )
        self.GetChannelNameFromString = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetChannelNameFromString',
                request_serializer=nidcpower__pb2.GetChannelNameFromStringRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetChannelNameFromStringResponse.FromString,
                )
        self.GetError = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetError',
                request_serializer=nidcpower__pb2.GetErrorRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetErrorResponse.FromString,
                )
        self.GetExtCalLastDateAndTime = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetExtCalLastDateAndTime',
                request_serializer=nidcpower__pb2.GetExtCalLastDateAndTimeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetExtCalLastDateAndTimeResponse.FromString,
                )
        self.GetExtCalLastTemp = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetExtCalLastTemp',
                request_serializer=nidcpower__pb2.GetExtCalLastTempRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetExtCalLastTempResponse.FromString,
                )
        self.GetExtCalRecommendedInterval = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetExtCalRecommendedInterval',
                request_serializer=nidcpower__pb2.GetExtCalRecommendedIntervalRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetExtCalRecommendedIntervalResponse.FromString,
                )
        self.GetLCRCompensationLastDateAndTime = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetLCRCompensationLastDateAndTime',
                request_serializer=nidcpower__pb2.GetLCRCompensationLastDateAndTimeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetLCRCompensationLastDateAndTimeResponse.FromString,
                )
        self.GetLCRCustomCableCompensationData = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetLCRCustomCableCompensationData',
                request_serializer=nidcpower__pb2.GetLCRCustomCableCompensationDataRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetLCRCustomCableCompensationDataResponse.FromString,
                )
        self.GetNextCoercionRecord = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetNextCoercionRecord',
                request_serializer=nidcpower__pb2.GetNextCoercionRecordRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetNextCoercionRecordResponse.FromString,
                )
        self.GetNextInterchangeWarning = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetNextInterchangeWarning',
                request_serializer=nidcpower__pb2.GetNextInterchangeWarningRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetNextInterchangeWarningResponse.FromString,
                )
        self.GetSelfCalLastDateAndTime = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetSelfCalLastDateAndTime',
                request_serializer=nidcpower__pb2.GetSelfCalLastDateAndTimeRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetSelfCalLastDateAndTimeResponse.FromString,
                )
        self.GetSelfCalLastTemp = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/GetSelfCalLastTemp',
                request_serializer=nidcpower__pb2.GetSelfCalLastTempRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.GetSelfCalLastTempResponse.FromString,
                )
        self.ImportAttributeConfigurationBuffer = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ImportAttributeConfigurationBuffer',
                request_serializer=nidcpower__pb2.ImportAttributeConfigurationBufferRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ImportAttributeConfigurationBufferResponse.FromString,
                )
        self.ImportAttributeConfigurationFile = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ImportAttributeConfigurationFile',
                request_serializer=nidcpower__pb2.ImportAttributeConfigurationFileRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ImportAttributeConfigurationFileResponse.FromString,
                )
        self.InitializeWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/InitializeWithChannels',
                request_serializer=nidcpower__pb2.InitializeWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.InitializeWithChannelsResponse.FromString,
                )
        self.InitializeWithIndependentChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/InitializeWithIndependentChannels',
                request_serializer=nidcpower__pb2.InitializeWithIndependentChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.InitializeWithIndependentChannelsResponse.FromString,
                )
        self.Initiate = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/Initiate',
                request_serializer=nidcpower__pb2.InitiateRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.InitiateResponse.FromString,
                )
        self.InitiateWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/InitiateWithChannels',
                request_serializer=nidcpower__pb2.InitiateWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.InitiateWithChannelsResponse.FromString,
                )
        self.InvalidateAllAttributes = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/InvalidateAllAttributes',
                request_serializer=nidcpower__pb2.InvalidateAllAttributesRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.InvalidateAllAttributesResponse.FromString,
                )
        self.Measure = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/Measure',
                request_serializer=nidcpower__pb2.MeasureRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.MeasureResponse.FromString,
                )
        self.MeasureMultiple = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/MeasureMultiple',
                request_serializer=nidcpower__pb2.MeasureMultipleRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.MeasureMultipleResponse.FromString,
                )
        self.MeasureMultipleLCR = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/MeasureMultipleLCR',
                request_serializer=nidcpower__pb2.MeasureMultipleLCRRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.MeasureMultipleLCRResponse.FromString,
                )
        self.PerformLCRLoadCompensation = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/PerformLCRLoadCompensation',
                request_serializer=nidcpower__pb2.PerformLCRLoadCompensationRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.PerformLCRLoadCompensationResponse.FromString,
                )
        self.PerformLCROpenCompensation = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/PerformLCROpenCompensation',
                request_serializer=nidcpower__pb2.PerformLCROpenCompensationRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.PerformLCROpenCompensationResponse.FromString,
                )
        self.PerformLCROpenCustomCableCompensation = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/PerformLCROpenCustomCableCompensation',
                request_serializer=nidcpower__pb2.PerformLCROpenCustomCableCompensationRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.PerformLCROpenCustomCableCompensationResponse.FromString,
                )
        self.PerformLCRShortCompensation = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/PerformLCRShortCompensation',
                request_serializer=nidcpower__pb2.PerformLCRShortCompensationRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.PerformLCRShortCompensationResponse.FromString,
                )
        self.PerformLCRShortCustomCableCompensation = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/PerformLCRShortCustomCableCompensation',
                request_serializer=nidcpower__pb2.PerformLCRShortCustomCableCompensationRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.PerformLCRShortCustomCableCompensationResponse.FromString,
                )
        self.QueryInCompliance = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/QueryInCompliance',
                request_serializer=nidcpower__pb2.QueryInComplianceRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.QueryInComplianceResponse.FromString,
                )
        self.QueryLatchedOutputCutoffState = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/QueryLatchedOutputCutoffState',
                request_serializer=nidcpower__pb2.QueryLatchedOutputCutoffStateRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.QueryLatchedOutputCutoffStateResponse.FromString,
                )
        self.QueryMaxCurrentLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/QueryMaxCurrentLimit',
                request_serializer=nidcpower__pb2.QueryMaxCurrentLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.QueryMaxCurrentLimitResponse.FromString,
                )
        self.QueryMaxVoltageLevel = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/QueryMaxVoltageLevel',
                request_serializer=nidcpower__pb2.QueryMaxVoltageLevelRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.QueryMaxVoltageLevelResponse.FromString,
                )
        self.QueryMinCurrentLimit = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/QueryMinCurrentLimit',
                request_serializer=nidcpower__pb2.QueryMinCurrentLimitRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.QueryMinCurrentLimitResponse.FromString,
                )
        self.QueryOutputState = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/QueryOutputState',
                request_serializer=nidcpower__pb2.QueryOutputStateRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.QueryOutputStateResponse.FromString,
                )
        self.ReadCurrentTemperature = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ReadCurrentTemperature',
                request_serializer=nidcpower__pb2.ReadCurrentTemperatureRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ReadCurrentTemperatureResponse.FromString,
                )
        self.Reset = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/Reset',
                request_serializer=nidcpower__pb2.ResetRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ResetResponse.FromString,
                )
        self.ResetDevice = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ResetDevice',
                request_serializer=nidcpower__pb2.ResetDeviceRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ResetDeviceResponse.FromString,
                )
        self.ResetInterchangeCheck = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ResetInterchangeCheck',
                request_serializer=nidcpower__pb2.ResetInterchangeCheckRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ResetInterchangeCheckResponse.FromString,
                )
        self.ResetWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ResetWithChannels',
                request_serializer=nidcpower__pb2.ResetWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ResetWithChannelsResponse.FromString,
                )
        self.ResetWithDefaults = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/ResetWithDefaults',
                request_serializer=nidcpower__pb2.ResetWithDefaultsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.ResetWithDefaultsResponse.FromString,
                )
        self.RevisionQuery = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/RevisionQuery',
                request_serializer=nidcpower__pb2.RevisionQueryRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.RevisionQueryResponse.FromString,
                )
        self.SelfTest = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SelfTest',
                request_serializer=nidcpower__pb2.SelfTestRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.SelfTestResponse.FromString,
                )
        self.SendSoftwareEdgeTrigger = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SendSoftwareEdgeTrigger',
                request_serializer=nidcpower__pb2.SendSoftwareEdgeTriggerRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.SendSoftwareEdgeTriggerResponse.FromString,
                )
        self.SendSoftwareEdgeTriggerWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SendSoftwareEdgeTriggerWithChannels',
                request_serializer=nidcpower__pb2.SendSoftwareEdgeTriggerWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.SendSoftwareEdgeTriggerWithChannelsResponse.FromString,
                )
        self.SetAttributeViBoolean = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SetAttributeViBoolean',
                request_serializer=nidcpower__pb2.SetAttributeViBooleanRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.SetAttributeViBooleanResponse.FromString,
                )
        self.SetAttributeViInt32 = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SetAttributeViInt32',
                request_serializer=nidcpower__pb2.SetAttributeViInt32Request.SerializeToString,
                response_deserializer=nidcpower__pb2.SetAttributeViInt32Response.FromString,
                )
        self.SetAttributeViInt64 = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SetAttributeViInt64',
                request_serializer=nidcpower__pb2.SetAttributeViInt64Request.SerializeToString,
                response_deserializer=nidcpower__pb2.SetAttributeViInt64Response.FromString,
                )
        self.SetAttributeViReal64 = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SetAttributeViReal64',
                request_serializer=nidcpower__pb2.SetAttributeViReal64Request.SerializeToString,
                response_deserializer=nidcpower__pb2.SetAttributeViReal64Response.FromString,
                )
        self.SetAttributeViSession = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SetAttributeViSession',
                request_serializer=nidcpower__pb2.SetAttributeViSessionRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.SetAttributeViSessionResponse.FromString,
                )
        self.SetAttributeViString = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SetAttributeViString',
                request_serializer=nidcpower__pb2.SetAttributeViStringRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.SetAttributeViStringResponse.FromString,
                )
        self.SetSequence = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/SetSequence',
                request_serializer=nidcpower__pb2.SetSequenceRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.SetSequenceResponse.FromString,
                )
        self.WaitForEvent = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/WaitForEvent',
                request_serializer=nidcpower__pb2.WaitForEventRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.WaitForEventResponse.FromString,
                )
        self.WaitForEventWithChannels = channel.unary_unary(
                '/nidcpower_grpc.NiDCPower/WaitForEventWithChannels',
                request_serializer=nidcpower__pb2.WaitForEventWithChannelsRequest.SerializeToString,
                response_deserializer=nidcpower__pb2.WaitForEventWithChannelsResponse.FromString,
                )


class NiDCPowerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AbortWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalSelfCalibrate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearError(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearInterchangeWarnings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearLatchedOutputCutoffState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureApertureTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureAutoZero(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureCurrentLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureCurrentLevelRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureCurrentLimitRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeMeasureTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeMeasureTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgePulseTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgePulseTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeSequenceAdvanceTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeShutdownTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeSourceTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeSourceTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeStartTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureDigitalEdgeStartTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureLCRCustomCableCompensation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureOutputEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureOutputFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureOutputRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureOutputResistance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureOvp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePowerLineFrequency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseBiasCurrentLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseBiasCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseBiasVoltageLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseBiasVoltageLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseCurrentLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseCurrentLevelRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseCurrentLimitRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseVoltageLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseVoltageLevelRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseVoltageLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePulseVoltageLimitRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSense(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeMeasureTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeMeasureTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgePulseTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgePulseTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeSequenceAdvanceTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeShutdownTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeSourceTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeSourceTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeStartTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSoftwareEdgeStartTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSourceMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureSourceModeWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureVoltageLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureVoltageLevelRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureVoltageLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureVoltageLimitRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAdvancedSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAdvancedSequenceCommitStepWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAdvancedSequenceStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAdvancedSequenceStepWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAdvancedSequenceWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAdvancedSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAdvancedSequenceWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisablePulseTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisablePulseTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableSequenceAdvanceTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableSequenceAdvanceTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableShutdownTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableSourceTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableSourceTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableStartTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableStartTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ErrorMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ErrorQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportAttributeConfigurationBuffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportAttributeConfigurationFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportSignal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportSignalWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchMultiple(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchMultipleLCR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttributeViBoolean(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttributeViInt32(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttributeViInt64(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttributeViReal64(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttributeViSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAttributeViString(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelNameFromString(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetError(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExtCalLastDateAndTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExtCalLastTemp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExtCalRecommendedInterval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLCRCompensationLastDateAndTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLCRCustomCableCompensationData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNextCoercionRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNextInterchangeWarning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSelfCalLastDateAndTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSelfCalLastTemp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportAttributeConfigurationBuffer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportAttributeConfigurationFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeWithIndependentChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Initiate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitiateWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvalidateAllAttributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Measure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MeasureMultiple(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MeasureMultipleLCR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformLCRLoadCompensation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformLCROpenCompensation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformLCROpenCustomCableCompensation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformLCRShortCompensation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformLCRShortCustomCableCompensation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryInCompliance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryLatchedOutputCutoffState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMaxCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMaxVoltageLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMinCurrentLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryOutputState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadCurrentTemperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetInterchangeCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetWithDefaults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevisionQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelfTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSoftwareEdgeTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendSoftwareEdgeTriggerWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttributeViBoolean(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttributeViInt32(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttributeViInt64(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttributeViReal64(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttributeViSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAttributeViString(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitForEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WaitForEventWithChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NiDCPowerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=nidcpower__pb2.AbortRequest.FromString,
                    response_serializer=nidcpower__pb2.AbortResponse.SerializeToString,
            ),
            'AbortWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.AbortWithChannels,
                    request_deserializer=nidcpower__pb2.AbortWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.AbortWithChannelsResponse.SerializeToString,
            ),
            'CalSelfCalibrate': grpc.unary_unary_rpc_method_handler(
                    servicer.CalSelfCalibrate,
                    request_deserializer=nidcpower__pb2.CalSelfCalibrateRequest.FromString,
                    response_serializer=nidcpower__pb2.CalSelfCalibrateResponse.SerializeToString,
            ),
            'ClearError': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearError,
                    request_deserializer=nidcpower__pb2.ClearErrorRequest.FromString,
                    response_serializer=nidcpower__pb2.ClearErrorResponse.SerializeToString,
            ),
            'ClearInterchangeWarnings': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearInterchangeWarnings,
                    request_deserializer=nidcpower__pb2.ClearInterchangeWarningsRequest.FromString,
                    response_serializer=nidcpower__pb2.ClearInterchangeWarningsResponse.SerializeToString,
            ),
            'ClearLatchedOutputCutoffState': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearLatchedOutputCutoffState,
                    request_deserializer=nidcpower__pb2.ClearLatchedOutputCutoffStateRequest.FromString,
                    response_serializer=nidcpower__pb2.ClearLatchedOutputCutoffStateResponse.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=nidcpower__pb2.CloseRequest.FromString,
                    response_serializer=nidcpower__pb2.CloseResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=nidcpower__pb2.CommitRequest.FromString,
                    response_serializer=nidcpower__pb2.CommitResponse.SerializeToString,
            ),
            'CommitWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitWithChannels,
                    request_deserializer=nidcpower__pb2.CommitWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.CommitWithChannelsResponse.SerializeToString,
            ),
            'ConfigureApertureTime': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureApertureTime,
                    request_deserializer=nidcpower__pb2.ConfigureApertureTimeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureApertureTimeResponse.SerializeToString,
            ),
            'ConfigureAutoZero': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureAutoZero,
                    request_deserializer=nidcpower__pb2.ConfigureAutoZeroRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureAutoZeroResponse.SerializeToString,
            ),
            'ConfigureCurrentLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureCurrentLevel,
                    request_deserializer=nidcpower__pb2.ConfigureCurrentLevelRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureCurrentLevelResponse.SerializeToString,
            ),
            'ConfigureCurrentLevelRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureCurrentLevelRange,
                    request_deserializer=nidcpower__pb2.ConfigureCurrentLevelRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureCurrentLevelRangeResponse.SerializeToString,
            ),
            'ConfigureCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureCurrentLimit,
                    request_deserializer=nidcpower__pb2.ConfigureCurrentLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureCurrentLimitResponse.SerializeToString,
            ),
            'ConfigureCurrentLimitRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureCurrentLimitRange,
                    request_deserializer=nidcpower__pb2.ConfigureCurrentLimitRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureCurrentLimitRangeResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeMeasureTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeMeasureTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeMeasureTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeMeasureTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgePulseTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgePulseTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgePulseTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgePulseTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgePulseTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeSequenceAdvanceTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeSequenceAdvanceTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeShutdownTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeShutdownTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeShutdownTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeShutdownTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeSourceTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeSourceTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeSourceTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeSourceTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeStartTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeStartTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerResponse.SerializeToString,
            ),
            'ConfigureDigitalEdgeStartTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureDigitalEdgeStartTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureDigitalEdgeStartTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureLCRCustomCableCompensation': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureLCRCustomCableCompensation,
                    request_deserializer=nidcpower__pb2.ConfigureLCRCustomCableCompensationRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureLCRCustomCableCompensationResponse.SerializeToString,
            ),
            'ConfigureOutputEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureOutputEnabled,
                    request_deserializer=nidcpower__pb2.ConfigureOutputEnabledRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureOutputEnabledResponse.SerializeToString,
            ),
            'ConfigureOutputFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureOutputFunction,
                    request_deserializer=nidcpower__pb2.ConfigureOutputFunctionRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureOutputFunctionResponse.SerializeToString,
            ),
            'ConfigureOutputRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureOutputRange,
                    request_deserializer=nidcpower__pb2.ConfigureOutputRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureOutputRangeResponse.SerializeToString,
            ),
            'ConfigureOutputResistance': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureOutputResistance,
                    request_deserializer=nidcpower__pb2.ConfigureOutputResistanceRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureOutputResistanceResponse.SerializeToString,
            ),
            'ConfigureOvp': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureOvp,
                    request_deserializer=nidcpower__pb2.ConfigureOvpRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureOvpResponse.SerializeToString,
            ),
            'ConfigurePowerLineFrequency': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePowerLineFrequency,
                    request_deserializer=nidcpower__pb2.ConfigurePowerLineFrequencyRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePowerLineFrequencyResponse.SerializeToString,
            ),
            'ConfigurePulseBiasCurrentLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseBiasCurrentLevel,
                    request_deserializer=nidcpower__pb2.ConfigurePulseBiasCurrentLevelRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseBiasCurrentLevelResponse.SerializeToString,
            ),
            'ConfigurePulseBiasCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseBiasCurrentLimit,
                    request_deserializer=nidcpower__pb2.ConfigurePulseBiasCurrentLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseBiasCurrentLimitResponse.SerializeToString,
            ),
            'ConfigurePulseBiasVoltageLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseBiasVoltageLevel,
                    request_deserializer=nidcpower__pb2.ConfigurePulseBiasVoltageLevelRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseBiasVoltageLevelResponse.SerializeToString,
            ),
            'ConfigurePulseBiasVoltageLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseBiasVoltageLimit,
                    request_deserializer=nidcpower__pb2.ConfigurePulseBiasVoltageLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseBiasVoltageLimitResponse.SerializeToString,
            ),
            'ConfigurePulseCurrentLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseCurrentLevel,
                    request_deserializer=nidcpower__pb2.ConfigurePulseCurrentLevelRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseCurrentLevelResponse.SerializeToString,
            ),
            'ConfigurePulseCurrentLevelRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseCurrentLevelRange,
                    request_deserializer=nidcpower__pb2.ConfigurePulseCurrentLevelRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseCurrentLevelRangeResponse.SerializeToString,
            ),
            'ConfigurePulseCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseCurrentLimit,
                    request_deserializer=nidcpower__pb2.ConfigurePulseCurrentLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseCurrentLimitResponse.SerializeToString,
            ),
            'ConfigurePulseCurrentLimitRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseCurrentLimitRange,
                    request_deserializer=nidcpower__pb2.ConfigurePulseCurrentLimitRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseCurrentLimitRangeResponse.SerializeToString,
            ),
            'ConfigurePulseVoltageLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseVoltageLevel,
                    request_deserializer=nidcpower__pb2.ConfigurePulseVoltageLevelRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseVoltageLevelResponse.SerializeToString,
            ),
            'ConfigurePulseVoltageLevelRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseVoltageLevelRange,
                    request_deserializer=nidcpower__pb2.ConfigurePulseVoltageLevelRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseVoltageLevelRangeResponse.SerializeToString,
            ),
            'ConfigurePulseVoltageLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseVoltageLimit,
                    request_deserializer=nidcpower__pb2.ConfigurePulseVoltageLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseVoltageLimitResponse.SerializeToString,
            ),
            'ConfigurePulseVoltageLimitRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePulseVoltageLimitRange,
                    request_deserializer=nidcpower__pb2.ConfigurePulseVoltageLimitRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigurePulseVoltageLimitRangeResponse.SerializeToString,
            ),
            'ConfigureSense': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSense,
                    request_deserializer=nidcpower__pb2.ConfigureSenseRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSenseResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeMeasureTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeMeasureTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeMeasureTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeMeasureTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgePulseTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgePulseTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgePulseTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgePulseTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeSequenceAdvanceTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeSequenceAdvanceTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeShutdownTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeShutdownTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeShutdownTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeShutdownTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeSourceTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeSourceTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeSourceTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeSourceTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeStartTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeStartTrigger,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerResponse.SerializeToString,
            ),
            'ConfigureSoftwareEdgeStartTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSoftwareEdgeStartTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerWithChannelsResponse.SerializeToString,
            ),
            'ConfigureSourceMode': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSourceMode,
                    request_deserializer=nidcpower__pb2.ConfigureSourceModeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSourceModeResponse.SerializeToString,
            ),
            'ConfigureSourceModeWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureSourceModeWithChannels,
                    request_deserializer=nidcpower__pb2.ConfigureSourceModeWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureSourceModeWithChannelsResponse.SerializeToString,
            ),
            'ConfigureVoltageLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureVoltageLevel,
                    request_deserializer=nidcpower__pb2.ConfigureVoltageLevelRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureVoltageLevelResponse.SerializeToString,
            ),
            'ConfigureVoltageLevelRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureVoltageLevelRange,
                    request_deserializer=nidcpower__pb2.ConfigureVoltageLevelRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureVoltageLevelRangeResponse.SerializeToString,
            ),
            'ConfigureVoltageLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureVoltageLimit,
                    request_deserializer=nidcpower__pb2.ConfigureVoltageLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureVoltageLimitResponse.SerializeToString,
            ),
            'ConfigureVoltageLimitRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureVoltageLimitRange,
                    request_deserializer=nidcpower__pb2.ConfigureVoltageLimitRangeRequest.FromString,
                    response_serializer=nidcpower__pb2.ConfigureVoltageLimitRangeResponse.SerializeToString,
            ),
            'CreateAdvancedSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAdvancedSequence,
                    request_deserializer=nidcpower__pb2.CreateAdvancedSequenceRequest.FromString,
                    response_serializer=nidcpower__pb2.CreateAdvancedSequenceResponse.SerializeToString,
            ),
            'CreateAdvancedSequenceCommitStepWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAdvancedSequenceCommitStepWithChannels,
                    request_deserializer=nidcpower__pb2.CreateAdvancedSequenceCommitStepWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.CreateAdvancedSequenceCommitStepWithChannelsResponse.SerializeToString,
            ),
            'CreateAdvancedSequenceStep': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAdvancedSequenceStep,
                    request_deserializer=nidcpower__pb2.CreateAdvancedSequenceStepRequest.FromString,
                    response_serializer=nidcpower__pb2.CreateAdvancedSequenceStepResponse.SerializeToString,
            ),
            'CreateAdvancedSequenceStepWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAdvancedSequenceStepWithChannels,
                    request_deserializer=nidcpower__pb2.CreateAdvancedSequenceStepWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.CreateAdvancedSequenceStepWithChannelsResponse.SerializeToString,
            ),
            'CreateAdvancedSequenceWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAdvancedSequenceWithChannels,
                    request_deserializer=nidcpower__pb2.CreateAdvancedSequenceWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.CreateAdvancedSequenceWithChannelsResponse.SerializeToString,
            ),
            'DeleteAdvancedSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAdvancedSequence,
                    request_deserializer=nidcpower__pb2.DeleteAdvancedSequenceRequest.FromString,
                    response_serializer=nidcpower__pb2.DeleteAdvancedSequenceResponse.SerializeToString,
            ),
            'DeleteAdvancedSequenceWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAdvancedSequenceWithChannels,
                    request_deserializer=nidcpower__pb2.DeleteAdvancedSequenceWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.DeleteAdvancedSequenceWithChannelsResponse.SerializeToString,
            ),
            'Disable': grpc.unary_unary_rpc_method_handler(
                    servicer.Disable,
                    request_deserializer=nidcpower__pb2.DisableRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableResponse.SerializeToString,
            ),
            'DisablePulseTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.DisablePulseTrigger,
                    request_deserializer=nidcpower__pb2.DisablePulseTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.DisablePulseTriggerResponse.SerializeToString,
            ),
            'DisablePulseTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DisablePulseTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.DisablePulseTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.DisablePulseTriggerWithChannelsResponse.SerializeToString,
            ),
            'DisableSequenceAdvanceTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableSequenceAdvanceTrigger,
                    request_deserializer=nidcpower__pb2.DisableSequenceAdvanceTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableSequenceAdvanceTriggerResponse.SerializeToString,
            ),
            'DisableSequenceAdvanceTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableSequenceAdvanceTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.DisableSequenceAdvanceTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableSequenceAdvanceTriggerWithChannelsResponse.SerializeToString,
            ),
            'DisableShutdownTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableShutdownTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.DisableShutdownTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableShutdownTriggerWithChannelsResponse.SerializeToString,
            ),
            'DisableSourceTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableSourceTrigger,
                    request_deserializer=nidcpower__pb2.DisableSourceTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableSourceTriggerResponse.SerializeToString,
            ),
            'DisableSourceTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableSourceTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.DisableSourceTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableSourceTriggerWithChannelsResponse.SerializeToString,
            ),
            'DisableStartTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableStartTrigger,
                    request_deserializer=nidcpower__pb2.DisableStartTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableStartTriggerResponse.SerializeToString,
            ),
            'DisableStartTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableStartTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.DisableStartTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.DisableStartTriggerWithChannelsResponse.SerializeToString,
            ),
            'ErrorMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ErrorMessage,
                    request_deserializer=nidcpower__pb2.ErrorMessageRequest.FromString,
                    response_serializer=nidcpower__pb2.ErrorMessageResponse.SerializeToString,
            ),
            'ErrorQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ErrorQuery,
                    request_deserializer=nidcpower__pb2.ErrorQueryRequest.FromString,
                    response_serializer=nidcpower__pb2.ErrorQueryResponse.SerializeToString,
            ),
            'ExportAttributeConfigurationBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportAttributeConfigurationBuffer,
                    request_deserializer=nidcpower__pb2.ExportAttributeConfigurationBufferRequest.FromString,
                    response_serializer=nidcpower__pb2.ExportAttributeConfigurationBufferResponse.SerializeToString,
            ),
            'ExportAttributeConfigurationFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportAttributeConfigurationFile,
                    request_deserializer=nidcpower__pb2.ExportAttributeConfigurationFileRequest.FromString,
                    response_serializer=nidcpower__pb2.ExportAttributeConfigurationFileResponse.SerializeToString,
            ),
            'ExportSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportSignal,
                    request_deserializer=nidcpower__pb2.ExportSignalRequest.FromString,
                    response_serializer=nidcpower__pb2.ExportSignalResponse.SerializeToString,
            ),
            'ExportSignalWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportSignalWithChannels,
                    request_deserializer=nidcpower__pb2.ExportSignalWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ExportSignalWithChannelsResponse.SerializeToString,
            ),
            'FetchMultiple': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchMultiple,
                    request_deserializer=nidcpower__pb2.FetchMultipleRequest.FromString,
                    response_serializer=nidcpower__pb2.FetchMultipleResponse.SerializeToString,
            ),
            'FetchMultipleLCR': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchMultipleLCR,
                    request_deserializer=nidcpower__pb2.FetchMultipleLCRRequest.FromString,
                    response_serializer=nidcpower__pb2.FetchMultipleLCRResponse.SerializeToString,
            ),
            'GetAttributeViBoolean': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttributeViBoolean,
                    request_deserializer=nidcpower__pb2.GetAttributeViBooleanRequest.FromString,
                    response_serializer=nidcpower__pb2.GetAttributeViBooleanResponse.SerializeToString,
            ),
            'GetAttributeViInt32': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttributeViInt32,
                    request_deserializer=nidcpower__pb2.GetAttributeViInt32Request.FromString,
                    response_serializer=nidcpower__pb2.GetAttributeViInt32Response.SerializeToString,
            ),
            'GetAttributeViInt64': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttributeViInt64,
                    request_deserializer=nidcpower__pb2.GetAttributeViInt64Request.FromString,
                    response_serializer=nidcpower__pb2.GetAttributeViInt64Response.SerializeToString,
            ),
            'GetAttributeViReal64': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttributeViReal64,
                    request_deserializer=nidcpower__pb2.GetAttributeViReal64Request.FromString,
                    response_serializer=nidcpower__pb2.GetAttributeViReal64Response.SerializeToString,
            ),
            'GetAttributeViSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttributeViSession,
                    request_deserializer=nidcpower__pb2.GetAttributeViSessionRequest.FromString,
                    response_serializer=nidcpower__pb2.GetAttributeViSessionResponse.SerializeToString,
            ),
            'GetAttributeViString': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAttributeViString,
                    request_deserializer=nidcpower__pb2.GetAttributeViStringRequest.FromString,
                    response_serializer=nidcpower__pb2.GetAttributeViStringResponse.SerializeToString,
            ),
            'GetChannelName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelName,
                    request_deserializer=nidcpower__pb2.GetChannelNameRequest.FromString,
                    response_serializer=nidcpower__pb2.GetChannelNameResponse.SerializeToString,
            ),
            'GetChannelNameFromString': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelNameFromString,
                    request_deserializer=nidcpower__pb2.GetChannelNameFromStringRequest.FromString,
                    response_serializer=nidcpower__pb2.GetChannelNameFromStringResponse.SerializeToString,
            ),
            'GetError': grpc.unary_unary_rpc_method_handler(
                    servicer.GetError,
                    request_deserializer=nidcpower__pb2.GetErrorRequest.FromString,
                    response_serializer=nidcpower__pb2.GetErrorResponse.SerializeToString,
            ),
            'GetExtCalLastDateAndTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExtCalLastDateAndTime,
                    request_deserializer=nidcpower__pb2.GetExtCalLastDateAndTimeRequest.FromString,
                    response_serializer=nidcpower__pb2.GetExtCalLastDateAndTimeResponse.SerializeToString,
            ),
            'GetExtCalLastTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExtCalLastTemp,
                    request_deserializer=nidcpower__pb2.GetExtCalLastTempRequest.FromString,
                    response_serializer=nidcpower__pb2.GetExtCalLastTempResponse.SerializeToString,
            ),
            'GetExtCalRecommendedInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExtCalRecommendedInterval,
                    request_deserializer=nidcpower__pb2.GetExtCalRecommendedIntervalRequest.FromString,
                    response_serializer=nidcpower__pb2.GetExtCalRecommendedIntervalResponse.SerializeToString,
            ),
            'GetLCRCompensationLastDateAndTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLCRCompensationLastDateAndTime,
                    request_deserializer=nidcpower__pb2.GetLCRCompensationLastDateAndTimeRequest.FromString,
                    response_serializer=nidcpower__pb2.GetLCRCompensationLastDateAndTimeResponse.SerializeToString,
            ),
            'GetLCRCustomCableCompensationData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLCRCustomCableCompensationData,
                    request_deserializer=nidcpower__pb2.GetLCRCustomCableCompensationDataRequest.FromString,
                    response_serializer=nidcpower__pb2.GetLCRCustomCableCompensationDataResponse.SerializeToString,
            ),
            'GetNextCoercionRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNextCoercionRecord,
                    request_deserializer=nidcpower__pb2.GetNextCoercionRecordRequest.FromString,
                    response_serializer=nidcpower__pb2.GetNextCoercionRecordResponse.SerializeToString,
            ),
            'GetNextInterchangeWarning': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNextInterchangeWarning,
                    request_deserializer=nidcpower__pb2.GetNextInterchangeWarningRequest.FromString,
                    response_serializer=nidcpower__pb2.GetNextInterchangeWarningResponse.SerializeToString,
            ),
            'GetSelfCalLastDateAndTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSelfCalLastDateAndTime,
                    request_deserializer=nidcpower__pb2.GetSelfCalLastDateAndTimeRequest.FromString,
                    response_serializer=nidcpower__pb2.GetSelfCalLastDateAndTimeResponse.SerializeToString,
            ),
            'GetSelfCalLastTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSelfCalLastTemp,
                    request_deserializer=nidcpower__pb2.GetSelfCalLastTempRequest.FromString,
                    response_serializer=nidcpower__pb2.GetSelfCalLastTempResponse.SerializeToString,
            ),
            'ImportAttributeConfigurationBuffer': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportAttributeConfigurationBuffer,
                    request_deserializer=nidcpower__pb2.ImportAttributeConfigurationBufferRequest.FromString,
                    response_serializer=nidcpower__pb2.ImportAttributeConfigurationBufferResponse.SerializeToString,
            ),
            'ImportAttributeConfigurationFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportAttributeConfigurationFile,
                    request_deserializer=nidcpower__pb2.ImportAttributeConfigurationFileRequest.FromString,
                    response_serializer=nidcpower__pb2.ImportAttributeConfigurationFileResponse.SerializeToString,
            ),
            'InitializeWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeWithChannels,
                    request_deserializer=nidcpower__pb2.InitializeWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.InitializeWithChannelsResponse.SerializeToString,
            ),
            'InitializeWithIndependentChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeWithIndependentChannels,
                    request_deserializer=nidcpower__pb2.InitializeWithIndependentChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.InitializeWithIndependentChannelsResponse.SerializeToString,
            ),
            'Initiate': grpc.unary_unary_rpc_method_handler(
                    servicer.Initiate,
                    request_deserializer=nidcpower__pb2.InitiateRequest.FromString,
                    response_serializer=nidcpower__pb2.InitiateResponse.SerializeToString,
            ),
            'InitiateWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiateWithChannels,
                    request_deserializer=nidcpower__pb2.InitiateWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.InitiateWithChannelsResponse.SerializeToString,
            ),
            'InvalidateAllAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.InvalidateAllAttributes,
                    request_deserializer=nidcpower__pb2.InvalidateAllAttributesRequest.FromString,
                    response_serializer=nidcpower__pb2.InvalidateAllAttributesResponse.SerializeToString,
            ),
            'Measure': grpc.unary_unary_rpc_method_handler(
                    servicer.Measure,
                    request_deserializer=nidcpower__pb2.MeasureRequest.FromString,
                    response_serializer=nidcpower__pb2.MeasureResponse.SerializeToString,
            ),
            'MeasureMultiple': grpc.unary_unary_rpc_method_handler(
                    servicer.MeasureMultiple,
                    request_deserializer=nidcpower__pb2.MeasureMultipleRequest.FromString,
                    response_serializer=nidcpower__pb2.MeasureMultipleResponse.SerializeToString,
            ),
            'MeasureMultipleLCR': grpc.unary_unary_rpc_method_handler(
                    servicer.MeasureMultipleLCR,
                    request_deserializer=nidcpower__pb2.MeasureMultipleLCRRequest.FromString,
                    response_serializer=nidcpower__pb2.MeasureMultipleLCRResponse.SerializeToString,
            ),
            'PerformLCRLoadCompensation': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformLCRLoadCompensation,
                    request_deserializer=nidcpower__pb2.PerformLCRLoadCompensationRequest.FromString,
                    response_serializer=nidcpower__pb2.PerformLCRLoadCompensationResponse.SerializeToString,
            ),
            'PerformLCROpenCompensation': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformLCROpenCompensation,
                    request_deserializer=nidcpower__pb2.PerformLCROpenCompensationRequest.FromString,
                    response_serializer=nidcpower__pb2.PerformLCROpenCompensationResponse.SerializeToString,
            ),
            'PerformLCROpenCustomCableCompensation': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformLCROpenCustomCableCompensation,
                    request_deserializer=nidcpower__pb2.PerformLCROpenCustomCableCompensationRequest.FromString,
                    response_serializer=nidcpower__pb2.PerformLCROpenCustomCableCompensationResponse.SerializeToString,
            ),
            'PerformLCRShortCompensation': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformLCRShortCompensation,
                    request_deserializer=nidcpower__pb2.PerformLCRShortCompensationRequest.FromString,
                    response_serializer=nidcpower__pb2.PerformLCRShortCompensationResponse.SerializeToString,
            ),
            'PerformLCRShortCustomCableCompensation': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformLCRShortCustomCableCompensation,
                    request_deserializer=nidcpower__pb2.PerformLCRShortCustomCableCompensationRequest.FromString,
                    response_serializer=nidcpower__pb2.PerformLCRShortCustomCableCompensationResponse.SerializeToString,
            ),
            'QueryInCompliance': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryInCompliance,
                    request_deserializer=nidcpower__pb2.QueryInComplianceRequest.FromString,
                    response_serializer=nidcpower__pb2.QueryInComplianceResponse.SerializeToString,
            ),
            'QueryLatchedOutputCutoffState': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryLatchedOutputCutoffState,
                    request_deserializer=nidcpower__pb2.QueryLatchedOutputCutoffStateRequest.FromString,
                    response_serializer=nidcpower__pb2.QueryLatchedOutputCutoffStateResponse.SerializeToString,
            ),
            'QueryMaxCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMaxCurrentLimit,
                    request_deserializer=nidcpower__pb2.QueryMaxCurrentLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.QueryMaxCurrentLimitResponse.SerializeToString,
            ),
            'QueryMaxVoltageLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMaxVoltageLevel,
                    request_deserializer=nidcpower__pb2.QueryMaxVoltageLevelRequest.FromString,
                    response_serializer=nidcpower__pb2.QueryMaxVoltageLevelResponse.SerializeToString,
            ),
            'QueryMinCurrentLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMinCurrentLimit,
                    request_deserializer=nidcpower__pb2.QueryMinCurrentLimitRequest.FromString,
                    response_serializer=nidcpower__pb2.QueryMinCurrentLimitResponse.SerializeToString,
            ),
            'QueryOutputState': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryOutputState,
                    request_deserializer=nidcpower__pb2.QueryOutputStateRequest.FromString,
                    response_serializer=nidcpower__pb2.QueryOutputStateResponse.SerializeToString,
            ),
            'ReadCurrentTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadCurrentTemperature,
                    request_deserializer=nidcpower__pb2.ReadCurrentTemperatureRequest.FromString,
                    response_serializer=nidcpower__pb2.ReadCurrentTemperatureResponse.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=nidcpower__pb2.ResetRequest.FromString,
                    response_serializer=nidcpower__pb2.ResetResponse.SerializeToString,
            ),
            'ResetDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetDevice,
                    request_deserializer=nidcpower__pb2.ResetDeviceRequest.FromString,
                    response_serializer=nidcpower__pb2.ResetDeviceResponse.SerializeToString,
            ),
            'ResetInterchangeCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetInterchangeCheck,
                    request_deserializer=nidcpower__pb2.ResetInterchangeCheckRequest.FromString,
                    response_serializer=nidcpower__pb2.ResetInterchangeCheckResponse.SerializeToString,
            ),
            'ResetWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetWithChannels,
                    request_deserializer=nidcpower__pb2.ResetWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.ResetWithChannelsResponse.SerializeToString,
            ),
            'ResetWithDefaults': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetWithDefaults,
                    request_deserializer=nidcpower__pb2.ResetWithDefaultsRequest.FromString,
                    response_serializer=nidcpower__pb2.ResetWithDefaultsResponse.SerializeToString,
            ),
            'RevisionQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RevisionQuery,
                    request_deserializer=nidcpower__pb2.RevisionQueryRequest.FromString,
                    response_serializer=nidcpower__pb2.RevisionQueryResponse.SerializeToString,
            ),
            'SelfTest': grpc.unary_unary_rpc_method_handler(
                    servicer.SelfTest,
                    request_deserializer=nidcpower__pb2.SelfTestRequest.FromString,
                    response_serializer=nidcpower__pb2.SelfTestResponse.SerializeToString,
            ),
            'SendSoftwareEdgeTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSoftwareEdgeTrigger,
                    request_deserializer=nidcpower__pb2.SendSoftwareEdgeTriggerRequest.FromString,
                    response_serializer=nidcpower__pb2.SendSoftwareEdgeTriggerResponse.SerializeToString,
            ),
            'SendSoftwareEdgeTriggerWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.SendSoftwareEdgeTriggerWithChannels,
                    request_deserializer=nidcpower__pb2.SendSoftwareEdgeTriggerWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.SendSoftwareEdgeTriggerWithChannelsResponse.SerializeToString,
            ),
            'SetAttributeViBoolean': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttributeViBoolean,
                    request_deserializer=nidcpower__pb2.SetAttributeViBooleanRequest.FromString,
                    response_serializer=nidcpower__pb2.SetAttributeViBooleanResponse.SerializeToString,
            ),
            'SetAttributeViInt32': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttributeViInt32,
                    request_deserializer=nidcpower__pb2.SetAttributeViInt32Request.FromString,
                    response_serializer=nidcpower__pb2.SetAttributeViInt32Response.SerializeToString,
            ),
            'SetAttributeViInt64': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttributeViInt64,
                    request_deserializer=nidcpower__pb2.SetAttributeViInt64Request.FromString,
                    response_serializer=nidcpower__pb2.SetAttributeViInt64Response.SerializeToString,
            ),
            'SetAttributeViReal64': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttributeViReal64,
                    request_deserializer=nidcpower__pb2.SetAttributeViReal64Request.FromString,
                    response_serializer=nidcpower__pb2.SetAttributeViReal64Response.SerializeToString,
            ),
            'SetAttributeViSession': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttributeViSession,
                    request_deserializer=nidcpower__pb2.SetAttributeViSessionRequest.FromString,
                    response_serializer=nidcpower__pb2.SetAttributeViSessionResponse.SerializeToString,
            ),
            'SetAttributeViString': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAttributeViString,
                    request_deserializer=nidcpower__pb2.SetAttributeViStringRequest.FromString,
                    response_serializer=nidcpower__pb2.SetAttributeViStringResponse.SerializeToString,
            ),
            'SetSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSequence,
                    request_deserializer=nidcpower__pb2.SetSequenceRequest.FromString,
                    response_serializer=nidcpower__pb2.SetSequenceResponse.SerializeToString,
            ),
            'WaitForEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitForEvent,
                    request_deserializer=nidcpower__pb2.WaitForEventRequest.FromString,
                    response_serializer=nidcpower__pb2.WaitForEventResponse.SerializeToString,
            ),
            'WaitForEventWithChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.WaitForEventWithChannels,
                    request_deserializer=nidcpower__pb2.WaitForEventWithChannelsRequest.FromString,
                    response_serializer=nidcpower__pb2.WaitForEventWithChannelsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nidcpower_grpc.NiDCPower', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NiDCPower(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/Abort',
            nidcpower__pb2.AbortRequest.SerializeToString,
            nidcpower__pb2.AbortResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AbortWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/AbortWithChannels',
            nidcpower__pb2.AbortWithChannelsRequest.SerializeToString,
            nidcpower__pb2.AbortWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalSelfCalibrate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/CalSelfCalibrate',
            nidcpower__pb2.CalSelfCalibrateRequest.SerializeToString,
            nidcpower__pb2.CalSelfCalibrateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ClearError',
            nidcpower__pb2.ClearErrorRequest.SerializeToString,
            nidcpower__pb2.ClearErrorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearInterchangeWarnings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ClearInterchangeWarnings',
            nidcpower__pb2.ClearInterchangeWarningsRequest.SerializeToString,
            nidcpower__pb2.ClearInterchangeWarningsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearLatchedOutputCutoffState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ClearLatchedOutputCutoffState',
            nidcpower__pb2.ClearLatchedOutputCutoffStateRequest.SerializeToString,
            nidcpower__pb2.ClearLatchedOutputCutoffStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/Close',
            nidcpower__pb2.CloseRequest.SerializeToString,
            nidcpower__pb2.CloseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/Commit',
            nidcpower__pb2.CommitRequest.SerializeToString,
            nidcpower__pb2.CommitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/CommitWithChannels',
            nidcpower__pb2.CommitWithChannelsRequest.SerializeToString,
            nidcpower__pb2.CommitWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureApertureTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureApertureTime',
            nidcpower__pb2.ConfigureApertureTimeRequest.SerializeToString,
            nidcpower__pb2.ConfigureApertureTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureAutoZero(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureAutoZero',
            nidcpower__pb2.ConfigureAutoZeroRequest.SerializeToString,
            nidcpower__pb2.ConfigureAutoZeroResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureCurrentLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureCurrentLevel',
            nidcpower__pb2.ConfigureCurrentLevelRequest.SerializeToString,
            nidcpower__pb2.ConfigureCurrentLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureCurrentLevelRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureCurrentLevelRange',
            nidcpower__pb2.ConfigureCurrentLevelRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigureCurrentLevelRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureCurrentLimit',
            nidcpower__pb2.ConfigureCurrentLimitRequest.SerializeToString,
            nidcpower__pb2.ConfigureCurrentLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureCurrentLimitRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureCurrentLimitRange',
            nidcpower__pb2.ConfigureCurrentLimitRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigureCurrentLimitRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeMeasureTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeMeasureTrigger',
            nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeMeasureTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeMeasureTriggerWithChannels',
            nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeMeasureTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgePulseTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgePulseTrigger',
            nidcpower__pb2.ConfigureDigitalEdgePulseTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgePulseTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgePulseTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgePulseTriggerWithChannels',
            nidcpower__pb2.ConfigureDigitalEdgePulseTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgePulseTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeSequenceAdvanceTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSequenceAdvanceTrigger',
            nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannels',
            nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeSequenceAdvanceTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeShutdownTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeShutdownTriggerWithChannels',
            nidcpower__pb2.ConfigureDigitalEdgeShutdownTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeShutdownTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeSourceTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSourceTrigger',
            nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeSourceTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeSourceTriggerWithChannels',
            nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeSourceTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeStartTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeStartTrigger',
            nidcpower__pb2.ConfigureDigitalEdgeStartTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeStartTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureDigitalEdgeStartTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureDigitalEdgeStartTriggerWithChannels',
            nidcpower__pb2.ConfigureDigitalEdgeStartTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureDigitalEdgeStartTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureLCRCustomCableCompensation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureLCRCustomCableCompensation',
            nidcpower__pb2.ConfigureLCRCustomCableCompensationRequest.SerializeToString,
            nidcpower__pb2.ConfigureLCRCustomCableCompensationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureOutputEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureOutputEnabled',
            nidcpower__pb2.ConfigureOutputEnabledRequest.SerializeToString,
            nidcpower__pb2.ConfigureOutputEnabledResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureOutputFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureOutputFunction',
            nidcpower__pb2.ConfigureOutputFunctionRequest.SerializeToString,
            nidcpower__pb2.ConfigureOutputFunctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureOutputRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureOutputRange',
            nidcpower__pb2.ConfigureOutputRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigureOutputRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureOutputResistance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureOutputResistance',
            nidcpower__pb2.ConfigureOutputResistanceRequest.SerializeToString,
            nidcpower__pb2.ConfigureOutputResistanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureOvp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureOvp',
            nidcpower__pb2.ConfigureOvpRequest.SerializeToString,
            nidcpower__pb2.ConfigureOvpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePowerLineFrequency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePowerLineFrequency',
            nidcpower__pb2.ConfigurePowerLineFrequencyRequest.SerializeToString,
            nidcpower__pb2.ConfigurePowerLineFrequencyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseBiasCurrentLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasCurrentLevel',
            nidcpower__pb2.ConfigurePulseBiasCurrentLevelRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseBiasCurrentLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseBiasCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasCurrentLimit',
            nidcpower__pb2.ConfigurePulseBiasCurrentLimitRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseBiasCurrentLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseBiasVoltageLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasVoltageLevel',
            nidcpower__pb2.ConfigurePulseBiasVoltageLevelRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseBiasVoltageLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseBiasVoltageLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseBiasVoltageLimit',
            nidcpower__pb2.ConfigurePulseBiasVoltageLimitRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseBiasVoltageLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseCurrentLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLevel',
            nidcpower__pb2.ConfigurePulseCurrentLevelRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseCurrentLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseCurrentLevelRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLevelRange',
            nidcpower__pb2.ConfigurePulseCurrentLevelRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseCurrentLevelRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLimit',
            nidcpower__pb2.ConfigurePulseCurrentLimitRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseCurrentLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseCurrentLimitRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseCurrentLimitRange',
            nidcpower__pb2.ConfigurePulseCurrentLimitRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseCurrentLimitRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseVoltageLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLevel',
            nidcpower__pb2.ConfigurePulseVoltageLevelRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseVoltageLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseVoltageLevelRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLevelRange',
            nidcpower__pb2.ConfigurePulseVoltageLevelRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseVoltageLevelRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseVoltageLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLimit',
            nidcpower__pb2.ConfigurePulseVoltageLimitRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseVoltageLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePulseVoltageLimitRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigurePulseVoltageLimitRange',
            nidcpower__pb2.ConfigurePulseVoltageLimitRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigurePulseVoltageLimitRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSense',
            nidcpower__pb2.ConfigureSenseRequest.SerializeToString,
            nidcpower__pb2.ConfigureSenseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeMeasureTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeMeasureTrigger',
            nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeMeasureTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeMeasureTriggerWithChannels',
            nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeMeasureTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgePulseTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgePulseTrigger',
            nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgePulseTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgePulseTriggerWithChannels',
            nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgePulseTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeSequenceAdvanceTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSequenceAdvanceTrigger',
            nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannels',
            nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeSequenceAdvanceTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeShutdownTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeShutdownTriggerWithChannels',
            nidcpower__pb2.ConfigureSoftwareEdgeShutdownTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeShutdownTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeSourceTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSourceTrigger',
            nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeSourceTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeSourceTriggerWithChannels',
            nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeSourceTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeStartTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeStartTrigger',
            nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSoftwareEdgeStartTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSoftwareEdgeStartTriggerWithChannels',
            nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureSoftwareEdgeStartTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSourceMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSourceMode',
            nidcpower__pb2.ConfigureSourceModeRequest.SerializeToString,
            nidcpower__pb2.ConfigureSourceModeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureSourceModeWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureSourceModeWithChannels',
            nidcpower__pb2.ConfigureSourceModeWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ConfigureSourceModeWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureVoltageLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureVoltageLevel',
            nidcpower__pb2.ConfigureVoltageLevelRequest.SerializeToString,
            nidcpower__pb2.ConfigureVoltageLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureVoltageLevelRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureVoltageLevelRange',
            nidcpower__pb2.ConfigureVoltageLevelRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigureVoltageLevelRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureVoltageLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureVoltageLimit',
            nidcpower__pb2.ConfigureVoltageLimitRequest.SerializeToString,
            nidcpower__pb2.ConfigureVoltageLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigureVoltageLimitRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ConfigureVoltageLimitRange',
            nidcpower__pb2.ConfigureVoltageLimitRangeRequest.SerializeToString,
            nidcpower__pb2.ConfigureVoltageLimitRangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAdvancedSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/CreateAdvancedSequence',
            nidcpower__pb2.CreateAdvancedSequenceRequest.SerializeToString,
            nidcpower__pb2.CreateAdvancedSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAdvancedSequenceCommitStepWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceCommitStepWithChannels',
            nidcpower__pb2.CreateAdvancedSequenceCommitStepWithChannelsRequest.SerializeToString,
            nidcpower__pb2.CreateAdvancedSequenceCommitStepWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAdvancedSequenceStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceStep',
            nidcpower__pb2.CreateAdvancedSequenceStepRequest.SerializeToString,
            nidcpower__pb2.CreateAdvancedSequenceStepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAdvancedSequenceStepWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceStepWithChannels',
            nidcpower__pb2.CreateAdvancedSequenceStepWithChannelsRequest.SerializeToString,
            nidcpower__pb2.CreateAdvancedSequenceStepWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAdvancedSequenceWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/CreateAdvancedSequenceWithChannels',
            nidcpower__pb2.CreateAdvancedSequenceWithChannelsRequest.SerializeToString,
            nidcpower__pb2.CreateAdvancedSequenceWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAdvancedSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DeleteAdvancedSequence',
            nidcpower__pb2.DeleteAdvancedSequenceRequest.SerializeToString,
            nidcpower__pb2.DeleteAdvancedSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAdvancedSequenceWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DeleteAdvancedSequenceWithChannels',
            nidcpower__pb2.DeleteAdvancedSequenceWithChannelsRequest.SerializeToString,
            nidcpower__pb2.DeleteAdvancedSequenceWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Disable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/Disable',
            nidcpower__pb2.DisableRequest.SerializeToString,
            nidcpower__pb2.DisableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisablePulseTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisablePulseTrigger',
            nidcpower__pb2.DisablePulseTriggerRequest.SerializeToString,
            nidcpower__pb2.DisablePulseTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisablePulseTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisablePulseTriggerWithChannels',
            nidcpower__pb2.DisablePulseTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.DisablePulseTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableSequenceAdvanceTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisableSequenceAdvanceTrigger',
            nidcpower__pb2.DisableSequenceAdvanceTriggerRequest.SerializeToString,
            nidcpower__pb2.DisableSequenceAdvanceTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableSequenceAdvanceTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisableSequenceAdvanceTriggerWithChannels',
            nidcpower__pb2.DisableSequenceAdvanceTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.DisableSequenceAdvanceTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableShutdownTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisableShutdownTriggerWithChannels',
            nidcpower__pb2.DisableShutdownTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.DisableShutdownTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableSourceTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisableSourceTrigger',
            nidcpower__pb2.DisableSourceTriggerRequest.SerializeToString,
            nidcpower__pb2.DisableSourceTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableSourceTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisableSourceTriggerWithChannels',
            nidcpower__pb2.DisableSourceTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.DisableSourceTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableStartTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisableStartTrigger',
            nidcpower__pb2.DisableStartTriggerRequest.SerializeToString,
            nidcpower__pb2.DisableStartTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableStartTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/DisableStartTriggerWithChannels',
            nidcpower__pb2.DisableStartTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.DisableStartTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ErrorMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ErrorMessage',
            nidcpower__pb2.ErrorMessageRequest.SerializeToString,
            nidcpower__pb2.ErrorMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ErrorQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ErrorQuery',
            nidcpower__pb2.ErrorQueryRequest.SerializeToString,
            nidcpower__pb2.ErrorQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportAttributeConfigurationBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ExportAttributeConfigurationBuffer',
            nidcpower__pb2.ExportAttributeConfigurationBufferRequest.SerializeToString,
            nidcpower__pb2.ExportAttributeConfigurationBufferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportAttributeConfigurationFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ExportAttributeConfigurationFile',
            nidcpower__pb2.ExportAttributeConfigurationFileRequest.SerializeToString,
            nidcpower__pb2.ExportAttributeConfigurationFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ExportSignal',
            nidcpower__pb2.ExportSignalRequest.SerializeToString,
            nidcpower__pb2.ExportSignalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportSignalWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ExportSignalWithChannels',
            nidcpower__pb2.ExportSignalWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ExportSignalWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchMultiple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/FetchMultiple',
            nidcpower__pb2.FetchMultipleRequest.SerializeToString,
            nidcpower__pb2.FetchMultipleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchMultipleLCR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/FetchMultipleLCR',
            nidcpower__pb2.FetchMultipleLCRRequest.SerializeToString,
            nidcpower__pb2.FetchMultipleLCRResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttributeViBoolean(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetAttributeViBoolean',
            nidcpower__pb2.GetAttributeViBooleanRequest.SerializeToString,
            nidcpower__pb2.GetAttributeViBooleanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttributeViInt32(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetAttributeViInt32',
            nidcpower__pb2.GetAttributeViInt32Request.SerializeToString,
            nidcpower__pb2.GetAttributeViInt32Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttributeViInt64(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetAttributeViInt64',
            nidcpower__pb2.GetAttributeViInt64Request.SerializeToString,
            nidcpower__pb2.GetAttributeViInt64Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttributeViReal64(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetAttributeViReal64',
            nidcpower__pb2.GetAttributeViReal64Request.SerializeToString,
            nidcpower__pb2.GetAttributeViReal64Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttributeViSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetAttributeViSession',
            nidcpower__pb2.GetAttributeViSessionRequest.SerializeToString,
            nidcpower__pb2.GetAttributeViSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAttributeViString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetAttributeViString',
            nidcpower__pb2.GetAttributeViStringRequest.SerializeToString,
            nidcpower__pb2.GetAttributeViStringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChannelName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetChannelName',
            nidcpower__pb2.GetChannelNameRequest.SerializeToString,
            nidcpower__pb2.GetChannelNameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChannelNameFromString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetChannelNameFromString',
            nidcpower__pb2.GetChannelNameFromStringRequest.SerializeToString,
            nidcpower__pb2.GetChannelNameFromStringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetError(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetError',
            nidcpower__pb2.GetErrorRequest.SerializeToString,
            nidcpower__pb2.GetErrorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExtCalLastDateAndTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetExtCalLastDateAndTime',
            nidcpower__pb2.GetExtCalLastDateAndTimeRequest.SerializeToString,
            nidcpower__pb2.GetExtCalLastDateAndTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExtCalLastTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetExtCalLastTemp',
            nidcpower__pb2.GetExtCalLastTempRequest.SerializeToString,
            nidcpower__pb2.GetExtCalLastTempResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExtCalRecommendedInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetExtCalRecommendedInterval',
            nidcpower__pb2.GetExtCalRecommendedIntervalRequest.SerializeToString,
            nidcpower__pb2.GetExtCalRecommendedIntervalResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLCRCompensationLastDateAndTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetLCRCompensationLastDateAndTime',
            nidcpower__pb2.GetLCRCompensationLastDateAndTimeRequest.SerializeToString,
            nidcpower__pb2.GetLCRCompensationLastDateAndTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLCRCustomCableCompensationData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetLCRCustomCableCompensationData',
            nidcpower__pb2.GetLCRCustomCableCompensationDataRequest.SerializeToString,
            nidcpower__pb2.GetLCRCustomCableCompensationDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNextCoercionRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetNextCoercionRecord',
            nidcpower__pb2.GetNextCoercionRecordRequest.SerializeToString,
            nidcpower__pb2.GetNextCoercionRecordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNextInterchangeWarning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetNextInterchangeWarning',
            nidcpower__pb2.GetNextInterchangeWarningRequest.SerializeToString,
            nidcpower__pb2.GetNextInterchangeWarningResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSelfCalLastDateAndTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetSelfCalLastDateAndTime',
            nidcpower__pb2.GetSelfCalLastDateAndTimeRequest.SerializeToString,
            nidcpower__pb2.GetSelfCalLastDateAndTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSelfCalLastTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/GetSelfCalLastTemp',
            nidcpower__pb2.GetSelfCalLastTempRequest.SerializeToString,
            nidcpower__pb2.GetSelfCalLastTempResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportAttributeConfigurationBuffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ImportAttributeConfigurationBuffer',
            nidcpower__pb2.ImportAttributeConfigurationBufferRequest.SerializeToString,
            nidcpower__pb2.ImportAttributeConfigurationBufferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportAttributeConfigurationFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ImportAttributeConfigurationFile',
            nidcpower__pb2.ImportAttributeConfigurationFileRequest.SerializeToString,
            nidcpower__pb2.ImportAttributeConfigurationFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/InitializeWithChannels',
            nidcpower__pb2.InitializeWithChannelsRequest.SerializeToString,
            nidcpower__pb2.InitializeWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeWithIndependentChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/InitializeWithIndependentChannels',
            nidcpower__pb2.InitializeWithIndependentChannelsRequest.SerializeToString,
            nidcpower__pb2.InitializeWithIndependentChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Initiate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/Initiate',
            nidcpower__pb2.InitiateRequest.SerializeToString,
            nidcpower__pb2.InitiateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitiateWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/InitiateWithChannels',
            nidcpower__pb2.InitiateWithChannelsRequest.SerializeToString,
            nidcpower__pb2.InitiateWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InvalidateAllAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/InvalidateAllAttributes',
            nidcpower__pb2.InvalidateAllAttributesRequest.SerializeToString,
            nidcpower__pb2.InvalidateAllAttributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Measure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/Measure',
            nidcpower__pb2.MeasureRequest.SerializeToString,
            nidcpower__pb2.MeasureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MeasureMultiple(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/MeasureMultiple',
            nidcpower__pb2.MeasureMultipleRequest.SerializeToString,
            nidcpower__pb2.MeasureMultipleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MeasureMultipleLCR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/MeasureMultipleLCR',
            nidcpower__pb2.MeasureMultipleLCRRequest.SerializeToString,
            nidcpower__pb2.MeasureMultipleLCRResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformLCRLoadCompensation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/PerformLCRLoadCompensation',
            nidcpower__pb2.PerformLCRLoadCompensationRequest.SerializeToString,
            nidcpower__pb2.PerformLCRLoadCompensationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformLCROpenCompensation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/PerformLCROpenCompensation',
            nidcpower__pb2.PerformLCROpenCompensationRequest.SerializeToString,
            nidcpower__pb2.PerformLCROpenCompensationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformLCROpenCustomCableCompensation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/PerformLCROpenCustomCableCompensation',
            nidcpower__pb2.PerformLCROpenCustomCableCompensationRequest.SerializeToString,
            nidcpower__pb2.PerformLCROpenCustomCableCompensationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformLCRShortCompensation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/PerformLCRShortCompensation',
            nidcpower__pb2.PerformLCRShortCompensationRequest.SerializeToString,
            nidcpower__pb2.PerformLCRShortCompensationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformLCRShortCustomCableCompensation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/PerformLCRShortCustomCableCompensation',
            nidcpower__pb2.PerformLCRShortCustomCableCompensationRequest.SerializeToString,
            nidcpower__pb2.PerformLCRShortCustomCableCompensationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryInCompliance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/QueryInCompliance',
            nidcpower__pb2.QueryInComplianceRequest.SerializeToString,
            nidcpower__pb2.QueryInComplianceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryLatchedOutputCutoffState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/QueryLatchedOutputCutoffState',
            nidcpower__pb2.QueryLatchedOutputCutoffStateRequest.SerializeToString,
            nidcpower__pb2.QueryLatchedOutputCutoffStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMaxCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/QueryMaxCurrentLimit',
            nidcpower__pb2.QueryMaxCurrentLimitRequest.SerializeToString,
            nidcpower__pb2.QueryMaxCurrentLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMaxVoltageLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/QueryMaxVoltageLevel',
            nidcpower__pb2.QueryMaxVoltageLevelRequest.SerializeToString,
            nidcpower__pb2.QueryMaxVoltageLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMinCurrentLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/QueryMinCurrentLimit',
            nidcpower__pb2.QueryMinCurrentLimitRequest.SerializeToString,
            nidcpower__pb2.QueryMinCurrentLimitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryOutputState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/QueryOutputState',
            nidcpower__pb2.QueryOutputStateRequest.SerializeToString,
            nidcpower__pb2.QueryOutputStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadCurrentTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ReadCurrentTemperature',
            nidcpower__pb2.ReadCurrentTemperatureRequest.SerializeToString,
            nidcpower__pb2.ReadCurrentTemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/Reset',
            nidcpower__pb2.ResetRequest.SerializeToString,
            nidcpower__pb2.ResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ResetDevice',
            nidcpower__pb2.ResetDeviceRequest.SerializeToString,
            nidcpower__pb2.ResetDeviceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetInterchangeCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ResetInterchangeCheck',
            nidcpower__pb2.ResetInterchangeCheckRequest.SerializeToString,
            nidcpower__pb2.ResetInterchangeCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ResetWithChannels',
            nidcpower__pb2.ResetWithChannelsRequest.SerializeToString,
            nidcpower__pb2.ResetWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetWithDefaults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/ResetWithDefaults',
            nidcpower__pb2.ResetWithDefaultsRequest.SerializeToString,
            nidcpower__pb2.ResetWithDefaultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevisionQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/RevisionQuery',
            nidcpower__pb2.RevisionQueryRequest.SerializeToString,
            nidcpower__pb2.RevisionQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelfTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SelfTest',
            nidcpower__pb2.SelfTestRequest.SerializeToString,
            nidcpower__pb2.SelfTestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSoftwareEdgeTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SendSoftwareEdgeTrigger',
            nidcpower__pb2.SendSoftwareEdgeTriggerRequest.SerializeToString,
            nidcpower__pb2.SendSoftwareEdgeTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendSoftwareEdgeTriggerWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SendSoftwareEdgeTriggerWithChannels',
            nidcpower__pb2.SendSoftwareEdgeTriggerWithChannelsRequest.SerializeToString,
            nidcpower__pb2.SendSoftwareEdgeTriggerWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAttributeViBoolean(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SetAttributeViBoolean',
            nidcpower__pb2.SetAttributeViBooleanRequest.SerializeToString,
            nidcpower__pb2.SetAttributeViBooleanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAttributeViInt32(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SetAttributeViInt32',
            nidcpower__pb2.SetAttributeViInt32Request.SerializeToString,
            nidcpower__pb2.SetAttributeViInt32Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAttributeViInt64(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SetAttributeViInt64',
            nidcpower__pb2.SetAttributeViInt64Request.SerializeToString,
            nidcpower__pb2.SetAttributeViInt64Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAttributeViReal64(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SetAttributeViReal64',
            nidcpower__pb2.SetAttributeViReal64Request.SerializeToString,
            nidcpower__pb2.SetAttributeViReal64Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAttributeViSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SetAttributeViSession',
            nidcpower__pb2.SetAttributeViSessionRequest.SerializeToString,
            nidcpower__pb2.SetAttributeViSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAttributeViString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SetAttributeViString',
            nidcpower__pb2.SetAttributeViStringRequest.SerializeToString,
            nidcpower__pb2.SetAttributeViStringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/SetSequence',
            nidcpower__pb2.SetSequenceRequest.SerializeToString,
            nidcpower__pb2.SetSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitForEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/WaitForEvent',
            nidcpower__pb2.WaitForEventRequest.SerializeToString,
            nidcpower__pb2.WaitForEventResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WaitForEventWithChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nidcpower_grpc.NiDCPower/WaitForEventWithChannels',
            nidcpower__pb2.WaitForEventWithChannelsRequest.SerializeToString,
            nidcpower__pb2.WaitForEventWithChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
