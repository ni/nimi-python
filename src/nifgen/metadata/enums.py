
# -*- coding: utf-8 -*-
# This file is code generated, do not make changes here.
#  If the generated information is not correct for python
#  changes can be made in enums_addon.py and they will be
#  applied at build time.

enums = {
    'AnalogPath': {
        'values': [
            {
                'name': 'MAIN',
                'suffix': '_ANALOG_PATH',
                'value': 0,
'documentation': {
'description': 'Specifies use of the main path.  NI-FGEN chooses the amplifier based on the user-specified gain.',
},
            },
            {
                'name': 'DIRECT',
                'suffix': '_ANALOG_PATH',
                'value': 1,
'documentation': {
'description': 'Specifies use of the direct path.',
},
            },
            {
                'name': 'FIXED_LOW_GAIN',
                'suffix': '_ANALOG_PATH',
                'value': 2,
'documentation': {
'description': 'Specifies use of the low-gain amplifier in the main path, no matter  what value the user specifies for gain. This setting limits the output  range.',
},
            },
            {
                'name': 'FIXED_HIGH_GAIN',
                'suffix': '_ANALOG_PATH',
                'value': 3,
'documentation': {
'description': 'Specifies use of the high-gain amplifier in the main path.',
},
            },
        ],
    },
    'BusType': {
        'values': [
            {
                'name': 'INVALID',
                'prefix': 'BUS_',
                'value': 0,
'documentation': {
'description': 'Indicates an invalid bus type.',
},
            },
            {
                'name': 'AT',
                'prefix': 'BUS_',
                'value': 1,
'documentation': {
'description': 'Indicates the signal generator is the AT bus type.',
},
            },
            {
                'name': 'PCI',
                'prefix': 'BUS_',
                'value': 2,
'documentation': {
'description': 'Indicates the signal generator is the PCI bus type.',
},
            },
            {
                'name': 'PXI',
                'prefix': 'BUS_',
                'value': 3,
'documentation': {
'description': 'Indicates the signal generator is the PXI bus type.',
},
            },
            {
                'name': 'VXI',
                'prefix': 'BUS_',
                'value': 4,
'documentation': {
'description': 'Indicates the signal generator is the VXI bus type.',
},
            },
            {
                'name': 'PCMCIA',
                'prefix': 'BUS_',
                'value': 5,
'documentation': {
'description': 'Indicates the signal generator is the PCI-CMA bus type.',
},
            },
            {
                'name': 'NIFGEN_VAL_BUS_PXIE',
                'value': 6,
'documentation': {
'description': 'Indicates the signal generator is the PXI Express bus type.',
},
            },
        ],
    },
    'CalADCInput': {
        'values': [
            {
                'name': 'ANALOG_OUTPUT',
                'value': 0,
'documentation': {
'description': 'Specifies that the ADC measures the analog output.',
},
            },
            {
                'name': 'INTERNAL_VOLTAGE_REFERENCE',
                'value': 1,
'documentation': {
'description': 'Specifies that the ADC measures the internal voltage reference.',
},
            },
            {
                'name': 'GROUND',
                'value': 2,
'documentation': {
'description': 'Specifies that the ADC measures the ground voltage.',
},
            },
            {
                'name': 'ANALOG_OUTPUT_DIFFERENTIAL',
                'value': 3,
'documentation': {
'description': 'Specifies that the ADC measures the differential analog output.',
},
            },
            {
                'name': 'ANALOG_OUTPUT_PLUS',
                'value': 4,
'documentation': {
'description': 'Specifies that the ADC measures the positive differential analog output.',
},
            },
            {
                'name': 'ANALOG_OUTPUT_MINUS',
                'value': 5,
'documentation': {
'description': 'Specifies that the ADC measures the negative differential analog output.',
},
            },
            {
                'name': 'ANALOG_OUTPUT_IDLE',
                'value': 6,
'documentation': {
'description': 'Specifies that the ADC measures the idle analog output.',
},
            },
        ],
    },
    'ClockMode': {
        'values': [
            {
                'name': 'HIGH_RESOLUTION',
                'value': 0,
'documentation': {
'description': 'High resolution sampling—Sample rate is generated by a high–resolution clock source.',
},
            },
            {
                'name': 'DIVIDE_DOWN',
                'value': 1,
'documentation': {
'description': 'Divide down sampling—Sample rates are generated by dividing the source frequency.',
},
            },
            {
                'name': 'AUTOMATIC',
                'value': 2,
'documentation': {
'description': 'Automatic Selection—NI-FGEN selects between the divide–down and high–resolution clocking modes.',
},
            },
        ],
    },
    'DataMarkerEventLevelPolarity': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is high.',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is low.',
},
            },
        ],
    },
    'DataProcessingMode': {
        'values': [
            {
                'name': 'REAL',
                'prefix': 'OSP_',
                'value': 0,
'documentation': {
'description': 'The waveform data points are real numbers (I data).',
},
            },
            {
                'name': 'COMPLEX',
                'prefix': 'OSP_',
                'value': 1,
'documentation': {
'description': 'The waveform data points are complex numbers (I/Q data).',
},
            },
        ],
    },
    'DoneEventActiveLevel': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is high.',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is low.',
},
            },
        ],
    },
    'DoneEventDelayUnits': {
        'values': [
            {
                'name': 'SAMPLE_CLOCK_PERIODS',
                'value': 101,
'documentation': {
'description': 'Specifies the pulse width in Sample clock periods.',
},
            },
            {
                'name': 'SECONDS',
                'value': 102,
'documentation': {
'description': 'Specifies the pulse width in seconds.',
},
            },
        ],
    },
    'DoneEventOutputBehavior': {
        'values': [
            {
                'name': 'PULSE',
                'value': 101,
'documentation': {
'description': 'Triggers a pulse for a specified period of time.',
},
            },
            {
                'name': 'LEVEL',
                'value': 102,
'documentation': {
'description': 'Shifts high or low while the event is active, depending  on the active state you specify.',
},
            },
        ],
    },
    'DoneEventPulsePolarity': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is high.',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is low.',
},
            },
        ],
    },
    'DoneEventPulseWidthUnits': {
        'values': [
            {
                'name': 'SAMPLE_CLOCK_PERIODS',
                'value': 101,
'documentation': {
'description': 'Specifies the pulse width in Sample clock periods.',
},
            },
            {
                'name': 'SECONDS',
                'value': 102,
'documentation': {
'description': 'Specifies the pulse width in seconds.',
},
            },
        ],
    },
    'FilterType': {
        'values': [
            {
                'name': 'FLAT',
                'prefix': 'OSP_',
                'value': 0,
'documentation': {
'description': 'Applies a flat filter to the data with the passband value specified  in the NIFGEN_ATTR_OSP_FIR_FILTER_FLAT_PASSBAND attribute.',
},
            },
            {
                'name': 'RAISED_COSINE',
                'prefix': 'OSP_',
                'value': 1,
'documentation': {
'description': 'Applies a raised cosine filter to the data with the alpha value  specified in the NIFGEN_ATTR_OSP_FIR_FILTER_RAISED_COSINE_ALPHA attribute.',
},
            },
            {
                'name': 'ROOT_RAISED_COSINE',
                'prefix': 'OSP_',
                'value': 2,
'documentation': {
'description': 'Applies a root raised cosine filter to the data with the alpha value  specified in the NIFGEN_ATTR_OSP_FIR_FILTER_ROOT_RAISED_COSINE_ALPHA attribute.',
},
            },
            {
                'name': 'GAUSSIAN',
                'prefix': 'OSP_',
                'value': 3,
'documentation': {
'description': 'Applies a Gaussian filter to the data with the BT value specified in the  NIFGEN_ATTR_OSP_FIR_FILTER_GAUSSIAN_BT attribute.',
},
            },
            {
                'name': 'CUSTOM',
                'prefix': 'OSP_',
                'value': 4,
'documentation': {
'description': 'Applies a custom filter to the data. If NIFGEN_VAL_OSP_CUSTOM is selected,  you must provide a set of FIR filter coefficients with the  niFgen_ConfigureCustomFIRFilterCoefficients function.',
},
            },
        ],
    },
    'IdleBehavior': {
        'values': [
            {
                'name': 'HOLD_LAST',
                'suffix': '_VALUE',
                'value': 400,
'documentation': {
'description': 'While in an Idle or Wait state, the output signal remains  at the last voltage generated prior to entering the state.',
},
            },
            {
                'name': 'JUMP_TO',
                'suffix': '_VALUE',
                'value': 401,
'documentation': {
'description': 'While in an Idle or Wait state, the output signal remains  at the value configured in the Idle or Wait value attribute.',
},
            },
        ],
    },
    'MarkerEventDelayUnits': {
        'values': [
            {
                'name': 'SAMPLE_CLOCK_PERIODS',
                'value': 101,
'documentation': {
'description': 'Specifies the pulse width in Sample clock periods.',
},
            },
            {
                'name': 'SECONDS',
                'value': 102,
'documentation': {
'description': 'Specifies the pulse width in seconds.',
},
            },
        ],
    },
    'MarkerEventOutputBehavior': {
        'values': [
            {
                'name': 'PULSE',
                'value': 101,
'documentation': {
'description': 'Triggers a pulse for a specified period of time.',
},
            },
            {
                'name': 'LEVEL',
                'value': 102,
'documentation': {
'description': 'Shifts high or low while the event is active, depending  on the active state you specify.',
},
            },
            {
                'name': 'TOGGLE',
                'value': 103,
'documentation': {
'description': '''
Changes to high or low while the event is active, depending on the
active state you specify.
''',
},
            },
        ],
    },
    'MarkerEventPulsePolarity': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is high.',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is low.',
},
            },
        ],
    },
    'MarkerEventPulseWidthUnits': {
        'values': [
            {
                'name': 'SAMPLE_CLOCK_PERIODS',
                'value': 101,
'documentation': {
'description': 'Specifies the pulse width in Sample clock periods.',
},
            },
            {
                'name': 'SECONDS',
                'value': 102,
'documentation': {
'description': 'Specifies the pulse width in seconds.',
},
            },
        ],
    },
    'MarkerEventToggleInitialState': {
        'values': [
            {
                'name': 'HIGH',
                'value': 101,
'documentation': {
'description': 'Sets the initial state of the Marker event to high.',
},
            },
            {
                'name': 'LOW',
                'value': 102,
'documentation': {
'description': 'Sets the initial state of the Marker event to low.',
},
            },
        ],
    },
    'OSPMode': {
        'values': [
            {
                'name': 'IF',
                'prefix': 'OSP_',
                'value': 0,
'documentation': {
'description': 'The OSP block generates intermediate frequency (IF) data.',
},
            },
            {
                'name': 'BASEBAND',
                'prefix': 'OSP_',
                'value': 1,
'documentation': {
'description': 'The OSP block generates baseband data.',
},
            },
        ],
    },
    'OSPOverflowErrorReporting': {
        'values': [
            {
                'name': 'ERROR',
                'prefix': 'ERROR_REPORTING_',
                'value': 0,
'documentation': {
'description': 'NI-FGEN returns errors whenever an overflow has occurred in the OSP block.',
},
            },
            {
                'name': 'DISABLED',
                'prefix': 'ERROR_REPORTING_',
                'value': 2,
'documentation': {
'description': 'NI-FGEN does not return errors when an overflow occurs in the OSP block.',
},
            },
        ],
    },
    'OperationMode': {
        'values': [
            {
                'name': 'NIFGEN_VAL_OPERATE_CONTINUOUS',
                'value': 0,
'documentation': {
'description': 'Continuous operation',
},
            },
        ],
    },
    'OutputMode': {
        'values': [
            {
                'name': 'FUNC',
                'prefix': 'OUTPUT_',
                'value': 0,
'documentation': {
'description': 'Standard Function mode—  Generates standard function waveforms  such as sine, square, triangle, and so on.',
},
            },
            {
                'name': 'ARB',
                'prefix': 'OUTPUT_',
                'value': 1,
'documentation': {
'description': 'Arbitrary waveform mode—Generates  waveforms from user-created/provided  waveform arrays of numeric data.',
},
            },
            {
                'name': 'SEQ',
                'prefix': 'OUTPUT_',
                'value': 2,
'documentation': {
'description': 'Arbitrary sequence mode —  Generates downloaded waveforms  in an order your specify.',
},
            },
            {
                'name': 'FREQ_LIST',
                'prefix': 'OUTPUT_',
                'value': 101,
'documentation': {
'description': 'Frequency List mode—Generates a  standard function using a list of  frequencies you define.',
},
            },
            {
                'name': 'NIFGEN_VAL_OUTPUT_SCRIPT',
                'value': 102,
'documentation': {
'description': '''
**Script mode—**\ Allows you to use scripting to link and loop multiple
waveforms in complex combinations.
''',
},
            },
        ],
    },
    'P2PAddressType': {
        'values': [
            {
                'name': 'PHYSICAL',
                'prefix': 'ADDR_',
                'value': 0,
'documentation': {
'description': 'Physical',
},
            },
            {
                'name': 'VIRTUAL',
                'prefix': 'ADDR_',
                'value': 1,
'documentation': {
'description': 'Physical',
},
            },
        ],
    },
    'ReadyForStartEventActiveLevel': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is high.',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is low.',
},
            },
        ],
    },
    'ReferenceClockSource': {
        'values': [
            {
                'name': 'CLOCK_IN',
                'value': 'ClkIn',
'documentation': {
'description': '''
Specifies that the CLK IN input signal from the front panel connector is
used as the Reference Clock source.
''',
},
            },
            {
                'name': 'NONE',
                'value': 'None',
'documentation': {
'description': 'Specifies that a Reference Clock is not used.',
},
            },
            {
                'name': 'ONBOARD_REFERENCE_CLOCK',
                'value': 'OnboardRefClk',
'documentation': {
'description': '''
Specifies that the onboard Reference Clock is used as the Reference
Clock source.
''',
},
            },
            {
                'name': 'PXI_CLOCK',
                'value': 'PXI_Clk',
'documentation': {
'description': 'Specifies the PXI Clock is used as the Reference Clock source.',
},
            },
            {
                'name': 'RTSI_7',
                'value': 'RTSI7',
'documentation': {
'description': 'Specifies that the RTSI line 7 is used as the Reference Clock source.',
},
            },
        ],
    },
    'SampleClockSource': {
        'values': [
            {
                'name': 'CLOCK_IN',
                'value': '"ClkIn"',
'documentation': {
'description': '''
Specifies that the signal at the CLK IN front panel connector is used as
the Sample Clock source.
''',
},
            },
            {
                'name': 'DDC_CLOCK_IN',
                'value': '"DDC_ClkIn"',
'documentation': {
'description': '''
Specifies that the Sample Clock from DDC connector is used as the Sample
Clock source.
''',
},
            },
            {
                'name': 'ONBOARD_CLOCK',
                'value': '"OnboardClock"',
'documentation': {
'description': 'Specifies that the onboard clock is used as the Sample Clock source.',
},
            },
            {
                'name': 'PXI_STAR_LINE',
                'value': '"PXI_Star"',
'documentation': {
'description': '''
Specifies that the PXI\_STAR trigger line is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_0RTSI_0',
                'value': '"PXI_Trig0"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 0 is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_1RTSI_1',
                'value': '"PXI_Trig1"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 1 is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_2RTSI_2',
                'value': '"PXI_Trig2"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 2 is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_3RTSI_3',
                'value': '"PXI_Trig3"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 3 is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_4RTSI_4',
                'value': '"PXI_Trig4"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 4 is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_5RTSI_5',
                'value': '"PXI_Trig5"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 5 is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_6RTSI_6',
                'value': '"PXI_Trig6"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 6 is used as the Sample Clock
source.
''',
},
            },
            {
                'name': 'PXI_TRIGGER_LINE_7RTSI_7',
                'value': '"PXI_Trig7"',
'documentation': {
'description': '''
Specifies that the PXI or RTSI line 7 is used as the Sample Clock
source.
''',
},
            },
        ],
    },
    'SampleClockTimebaseSource': {
        'values': [
            {
                'name': 'CLOCK_IN',
                'value': '"ClkIn"',
'documentation': {
'description': '''
Specifies that the external signal on the CLK IN front panel connector
is used as the source.
''',
},
            },
            {
                'name': 'ONBOARD_CLOCK',
                'value': '"OnboardClock"',
'documentation': {
'description': 'Specifies that the onboard Sample Clock timebase is used as the source.',
},
            },
        ],
    },
    'ScriptTriggerDigitalEdgeEdge': {
        'values': [
            {
                'name': 'RISING',
                'suffix': '_EDGE',
                'value': 101,
'documentation': {
'description': 'Rising Edge',
},
            },
            {
                'name': 'FALLING',
                'suffix': '_EDGE',
                'value': 102,
'documentation': {
'description': 'Falling Edge',
},
            },
        ],
    },
    'ScriptTriggerDigitalLevelActiveLevel': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'High Level',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'Low Level',
},
            },
        ],
    },
    'ScriptTriggerType': {
        'values': [
            {
                'name': 'TRIG_NONE',
                'value': 101,
'documentation': {
'description': 'No trigger is configured. Signal generation starts immediately.',
},
            },
            {
                'name': 'DIGITAL_EDGE',
                'value': 102,
'documentation': {
'description': 'Trigger is asserted when a digital edge is detected.',
},
            },
            {
                'name': 'DIGITAL_LEVEL',
                'value': 103,
'documentation': {
'description': 'Trigger is asserted when a digital level is detected.',
},
            },
            {
                'name': 'SOFTWARE_EDGE',
                'value': 104,
'documentation': {
'description': 'Trigger is asserted when a software edge is detected.',
},
            },
        ],
    },
    'StartTriggerDigitalEdgeEdge': {
        'values': [
            {
                'name': 'RISING',
                'suffix': '_EDGE',
                'value': 101,
'documentation': {
'description': 'Rising Edge',
},
            },
            {
                'name': 'FALLING',
                'suffix': '_EDGE',
                'value': 102,
'documentation': {
'description': 'Falling Edge',
},
            },
        ],
    },
    'StartTriggerType': {
        'values': [
            {
                'name': 'TRIG_NONE',
                'value': 101,
'documentation': {
'description': 'None',
},
            },
            {
                'name': 'DIGITAL_EDGE',
                'value': 102,
'documentation': {
'description': 'Digital Edge',
},
            },
            {
                'name': 'SOFTWARE_EDGE',
                'value': 104,
'documentation': {
'description': 'Software Edge',
},
            },
            {
                'name': 'P2P_ENDPOINT_FULLNESS',
                'value': 106,
'documentation': {
'description': 'P2P Endpoint Fullness',
},
            },
        ],
    },
    'StartedEventActiveLevel': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is high.',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is low.',
},
            },
        ],
    },
    'StartedEventDelayUnits': {
        'values': [
            {
                'name': 'SAMPLE_CLOCK_PERIODS',
                'value': 101,
'documentation': {
'description': 'Specifies the pulse width in Sample clock periods.',
},
            },
            {
                'name': 'SECONDS',
                'value': 102,
'documentation': {
'description': 'Specifies the pulse width in seconds.',
},
            },
        ],
    },
    'StartedEventOutputBehavior': {
        'values': [
            {
                'name': 'PULSE',
                'value': 101,
'documentation': {
'description': 'Triggers a pulse for a specified period of time.',
},
            },
            {
                'name': 'LEVEL',
                'value': 102,
'documentation': {
'description': 'Shifts high or low while the event is active, depending  on the active state you specify.',
},
            },
        ],
    },
    'StartedEventPulsePolarity': {
        'values': [
            {
                'name': 'HIGH',
                'prefix': 'ACTIVE_',
                'value': 101,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is high.',
},
            },
            {
                'name': 'LOW',
                'prefix': 'ACTIVE_',
                'value': 102,
'documentation': {
'description': 'When the operation is ready to start, the Ready for Start  event level is low.',
},
            },
        ],
    },
    'StartedEventPulseWidthUnits': {
        'values': [
            {
                'name': 'SAMPLE_CLOCK_PERIODS',
                'value': 101,
'documentation': {
'description': 'Specifies the pulse width in Sample clock periods.',
},
            },
            {
                'name': 'SECONDS',
                'value': 102,
'documentation': {
'description': 'Specifies the pulse width in seconds.',
},
            },
        ],
    },
    'SynchronizationSource': {
        'values': [
            {
                'name': 'TTL0',
                'value': 111,
'documentation': {
'description': 'PXI TRIG0 or VXI TTL0',
},
            },
            {
                'name': 'TTL1',
                'value': 112,
'documentation': {
'description': 'PXI TRIG1 or VXI TTL1',
},
            },
            {
                'name': 'TTL2',
                'value': 113,
'documentation': {
'description': 'PXI TRIG2 or VXI TTL2',
},
            },
            {
                'name': 'TTL3',
                'value': 114,
'documentation': {
'description': 'PXI TRIG3 or VXI TTL3',
},
            },
            {
                'name': 'TTL4',
                'value': 115,
'documentation': {
'description': 'PXI TRIG4 or VXI TTL4',
},
            },
            {
                'name': 'TTL5',
                'value': 116,
'documentation': {
'description': 'PXI TRIG5 or VXI TTL5',
},
            },
            {
                'name': 'TTL6',
                'value': 117,
'documentation': {
'description': 'PXI TRIG6 or VXI TTL6',
},
            },
            {
                'name': 'RTSI_0',
                'value': 141,
'documentation': {
'description': 'RTSI 0',
},
            },
            {
                'name': 'RTSI_1',
                'value': 142,
'documentation': {
'description': 'RTSI 1',
},
            },
            {
                'name': 'RTSI_2',
                'value': 143,
'documentation': {
'description': 'RTSI 2',
},
            },
            {
                'name': 'RTSI_3',
                'value': 144,
'documentation': {
'description': 'RTSI 3',
},
            },
            {
                'name': 'RTSI_4',
                'value': 145,
'documentation': {
'description': 'RTSI 4',
},
            },
            {
                'name': 'RTSI_5',
                'value': 146,
'documentation': {
'description': 'RTSI 5',
},
            },
            {
                'name': 'RTSI_6',
                'value': 147,
'documentation': {
'description': 'RTSI 6',
},
            },
            {
                'name': 'NONE',
                'value': 1000,
'documentation': {
'description': 'No Synchronization Source',
},
            },
        ],
    },
    'TerminalConfiguration': {
        'values': [
            {
                'name': 'SINGLE_ENDED',
                'value': 300,
'documentation': {
'description': 'Single-ended operation',
},
            },
            {
                'name': 'DIFFERENTIAL',
                'value': 301,
'documentation': {
'description': 'Differential operation',
},
            },
        ],
    },
    'TriggerMode': {
        'values': [
            {
                'name': 'SINGLE',
                'value': 1,
'documentation': {
'description': 'Single Trigger Mode - The waveform you describe in the sequence list is  generated only once by going through the entire staging list. Only one  trigger is required to start the waveform generation. You can use Single  trigger mode with the output mode in any mode. After a trigger is  received, the waveform generation starts from the first stage and  continues through to the last stage. Then, the last stage generates  repeatedly until you stop the waveform generation.',
},
            },
            {
                'name': 'CONTINUOUS',
                'value': 2,
'documentation': {
'description': 'Continuous Trigger Mode - The waveform you describe in the staging list generates infinitely by repeatedly cycling through the staging list.  After a trigger is received, the waveform generation starts from the  first stage and continues through to the last stage. After the last stage  completes, the waveform generation loops back to the start of the  first stage and continues until it is stopped. Only one trigger is  required to start the waveform generation.',
},
            },
            {
                'name': 'STEPPED',
                'value': 3,
'documentation': {
'description': '''
Stepped Trigger Mode - After a start trigger is received, the waveform  described by the first stage generates. Then, the device waits for the  next trigger signal. On the next trigger, the waveform described by the  second stage generates, and so on. After the staging list completes,  the waveform generation returns to the first stage and continues in a  cyclic fashion. After any stage has generated completely, the first  eight samples of the next stage are repeated continuously until the next  trigger is received.
trigger mode.
''',
'note': 'In Frequency List mode, Stepped trigger mode is the same as Burst',
},
            },
            {
                'name': 'BURST',
                'value': 4,
'documentation': {
'description': '''
Burst Trigger Mode - After a start trigger is received, the waveform  described by the first stage generates until another trigger is  received. At the next trigger, the buffer of the previous stage completes, and then the waveform described by the second stage generates. After the staging list completes, the waveform generation  returns to the first stage and continues in a cyclic fashion. In  Frequency List mode, the duration instruction is ignored, and the trigger  switches the frequency to the next frequency in the list.
trigger mode.
''',
'note': 'In Frequency List mode, Stepped trigger mode is the same as Burst',
},
            },
        ],
    },
    'TriggerSource': {
        'values': [
            {
                'name': 'IMMEDIATE',
                'value': 0,
'documentation': {
'description': 'Immediate-The signal generator does not wait for a trigger of any kind.',
},
            },
            {
                'name': 'EXTERNAL',
                'value': 1,
'documentation': {
'description': 'External-The signal generator waits for a trigger on the external trigger input',
},
            },
            {
                'name': 'SOFTWARE_TRIG',
                'value': 2,
'documentation': {
'description': 'Software Trigger-The signal generator waits until you call niFgen_SendSWTrigger.',
},
            },
            {
                'name': 'TTL0',
                'value': 111,
'documentation': {
'description': 'PXI TRIG0 or VXI TTL0',
},
            },
            {
                'name': 'TTL1',
                'value': 112,
'documentation': {
'description': 'PXI TRIG1 or VXI TTL1',
},
            },
            {
                'name': 'TTL2',
                'value': 113,
'documentation': {
'description': 'PXI TRIG2 or VXI TTL2',
},
            },
            {
                'name': 'TTL3',
                'value': 114,
'documentation': {
'description': 'PXI TRIG3 or VXI TTL3',
},
            },
            {
                'name': 'TTL4',
                'value': 115,
'documentation': {
'description': 'PXI TRIG4 or VXI TTL4',
},
            },
            {
                'name': 'TTL5',
                'value': 116,
'documentation': {
'description': 'PXI TRIG5 or VXI TTL5',
},
            },
            {
                'name': 'TTL6',
                'value': 117,
'documentation': {
'description': 'PXI TRIG6 or VXI TTL6',
},
            },
            {
                'name': 'PXI_STAR',
                'value': 131,
'documentation': {
'description': 'PXI star',
},
            },
            {
                'name': 'RTSI_0',
                'value': 141,
'documentation': {
'description': 'RTSI line 0',
},
            },
            {
                'name': 'RTSI_1',
                'value': 142,
'documentation': {
'description': 'RTSI line 1',
},
            },
            {
                'name': 'RTSI_2',
                'value': 143,
'documentation': {
'description': 'RTSI line 2',
},
            },
            {
                'name': 'RTSI_3',
                'value': 144,
'documentation': {
'description': 'RTSI line 3',
},
            },
            {
                'name': 'RTSI_4',
                'value': 145,
'documentation': {
'description': 'RTSI line 4',
},
            },
            {
                'name': 'RTSI_5',
                'value': 146,
'documentation': {
'description': 'RTSI line 5',
},
            },
            {
                'name': 'RTSI_6',
                'value': 147,
'documentation': {
'description': 'RTSI line 6',
},
            },
            {
                'name': 'RTSI_7',
                'value': 1010,
'documentation': {
'description': 'RTSI line 7',
},
            },
            {
                'name': 'PFI_0',
                'value': 1011,
'documentation': {
'description': 'PFI 0',
},
            },
            {
                'name': 'PFI_1',
                'value': 1012,
'documentation': {
'description': 'PFI 1',
},
            },
            {
                'name': 'PFI_2',
                'value': 1013,
'documentation': {
'description': 'PFI 2',
},
            },
            {
                'name': 'PFI_3',
                'value': 1014,
'documentation': {
'description': 'PFI 3',
},
            },
            {
                'name': 'NIFGEN_VAL_OTHER_TERMINAL',
                'value': 1018,
'documentation': {
'description': 'Specifies that another terminal is used.',
},
            },
        ],
    },
    'UpdateClockSource': {
        'values': [
            {
                'name': 'NIFGEN_VAL_INTERNAL',
                'value': 0,
'documentation': {
'description': 'Internal update clock',
},
            },
            {
                'name': 'NIFGEN_VAL_EXTERNAL',
                'value': 1,
'documentation': {
'description': 'External update clock given on the IO connector',
},
            },
            {
                'name': 'NIFGEN_VAL_PXI_STAR',
                'value': 131,
'documentation': {
'description': '''
(PXI only) PXI star trigger line. This choice is valid only in PXI
chassis slots 3 through 15.
''',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_0',
                'value': 141,
'documentation': {
'description': 'RTSI line 0',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_1',
                'value': 142,
'documentation': {
'description': 'RTSI line 1',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_2',
                'value': 143,
'documentation': {
'description': 'RTSI line 2',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_3',
                'value': 144,
'documentation': {
'description': 'RTSI line 3',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_4',
                'value': 145,
'documentation': {
'description': 'RTSI line 4',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_5',
                'value': 146,
'documentation': {
'description': 'RTSI line 5',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_6',
                'value': 147,
'documentation': {
'description': 'RTSI line 6',
},
            },
            {
                'name': 'NIFGEN_VAL_RTSI_7',
                'value': 1010,
'documentation': {
'description': '(PCI only) RTSI line 7',
},
            },
            {
                'name': 'NIFGEN_VAL_OTHER_TERMINAL',
                'value': 1018,
'documentation': {
'description': 'Uses another device terminal.',
},
            },
            {
                'name': 'NIFGEN_VAL_CLK_IN',
                'value': 1202,
'documentation': {
'description': 'Coaxial CLK IN connector on the board front panel',
},
            },
            {
                'name': 'NIFGEN_VAL_DDC_CLK_IN',
                'value': 1203,
'documentation': {
'description': 'DDC CLK IN line of the Digital Data & Control connector',
},
            },
        ],
    },
    'VideoWaveformType': {
        'values': [
            {
                'name': 'PAL_B',
                'value': 0,
'documentation': {
'description': 'PAL B Video Type',
},
            },
            {
                'name': 'PAL_D',
                'value': 1,
'documentation': {
'description': 'PAL D Video Type',
},
            },
            {
                'name': 'PAL_G',
                'value': 2,
'documentation': {
'description': 'PAL G Video Type',
},
            },
            {
                'name': 'PAL_H',
                'value': 3,
'documentation': {
'description': 'PAL H Video Type',
},
            },
            {
                'name': 'PAL_I',
                'value': 4,
'documentation': {
'description': 'PAL I Video Type',
},
            },
            {
                'name': 'PAL_M',
                'value': 5,
'documentation': {
'description': 'PAL M Video Type',
},
            },
            {
                'name': 'PAL_N',
                'value': 6,
'documentation': {
'description': 'PAL N Video Type',
},
            },
            {
                'name': 'NTSC_M',
                'value': 7,
'documentation': {
'description': 'NTSC M Video Type',
},
            },
        ],
    },
    'WaitBehavior': {
        'values': [
            {
                'name': 'HOLD_LAST',
                'suffix': '_VALUE',
                'value': 400,
'documentation': {
'description': 'While in an Idle or Wait state, the output signal remains  at the last voltage generated prior to entering the state.',
},
            },
            {
                'name': 'JUMP_TO',
                'suffix': '_VALUE',
                'value': 401,
'documentation': {
'description': 'While in an Idle or Wait state, the output signal remains  at the value configured in the Idle or Wait value attribute.',
},
            },
        ],
    },
    'Waveform': {
        'values': [
            {
                'name': 'SINE',
                'prefix': 'WFM_',
                'value': 1,
'documentation': {
'description': 'Sinusoid waveform',
},
            },
            {
                'name': 'SQUARE',
                'prefix': 'WFM_',
                'value': 2,
'documentation': {
'description': 'Square waveform',
},
            },
            {
                'name': 'TRIANGLE',
                'prefix': 'WFM_',
                'value': 3,
'documentation': {
'description': 'Triange waveform',
},
            },
            {
                'name': 'RAMP_UP',
                'prefix': 'WFM_',
                'value': 4,
'documentation': {
'description': 'Positive ramp waveform',
},
            },
            {
                'name': 'RAMP_DOWN',
                'prefix': 'WFM_',
                'value': 5,
'documentation': {
'description': 'Negative ramp waveform',
},
            },
            {
                'name': 'DC',
                'prefix': 'WFM_',
                'value': 6,
'documentation': {
'description': 'Constant voltage',
},
            },
            {
                'name': 'NOISE',
                'prefix': 'WFM_',
                'value': 101,
'documentation': {
'description': 'White noise',
},
            },
            {
                'name': 'USER',
                'prefix': 'WFM_',
                'value': 102,
'documentation': {
'description': 'User-defined waveform as defined by the niFgen_DefineUserStandardWaveform function.',
},
            },
        ],
    },
}
