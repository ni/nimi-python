# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.
[tox]
# tox.ini and tox-travis.ini are copies of the same content with different envlist commented out
# tox-travis.ini will have pyXX-clean and all pyXX-installers in the default envlist, while the developer tox.ini 
# does not have clean and only has one pyXX-installers
# Uncomment this line for tox.ini
# envlist = py38-build_test,py38-codegen,py38-installers,py{35,36,37,38,py3}-test,py38-flake8,py38-docs,py38-pkg
# Uncomment this line for tox-travis.ini
envlist = py38-clean,py38-build_test,py38-codegen,py{35,36,37,38,py3}-installers,py{35,36,37,38,py3}-test,py38-flake8,py38-docs,py38-pkg
skip_missing_interpreters=True
ignore_basepython_conflict=True
skipsdist = true
toxworkdir = .tox/{env:BITNESS:64}

[testenv]
description =
    test: Run tests
    build_test: Test the build scripts
    clean: Clean code generated files
    codegen: Run code generation step
    installers: Build the installers (wheels and sdists)
    flake8: Run static analysis
    docs: Generate documentation
    pkg: Verify the package
    nidcpower_system_tests: Run system tests for nidcpower
    nidigital_system_tests: Run system tests for nidigital
    nidmm_system_tests: Run system tests for nidmm
    nifgen_system_tests: Run system tests for nifgen
    niscope_system_tests: Run system tests for niscope
    niswitch_system_tests: Run system tests for niswitch
    nimodinst_system_tests: Run system tests for nimodinst
    nise_system_tests: Run system tests for nise

changedir =
    build_test: .
    test: .
    codegen: .
    installers: .
    clean: .
    docs: docs
    flake8: .
    pkg: .
    nidcpower_system_tests: .
    nidigital_system_tests: .
    nidmm_system_tests: .
    nifgen_system_tests: .
    niscope_system_tests: .
    niswitch_system_tests: .
    nimodinst_system_tests: .
    nise_system_tests: .

# We touch .coverage first to ensure the files exists, then remove it.
commands =
    build_test: python --version
    build_test: python -c "import platform; print(platform.architecture())"
    build_test: python -m pip install pip --upgrade pip
    build_test: python -m pip list
    build_test: coverage run --rcfile=tools/coverage_unit_tests.rc --source build.helper -m py.test --pyargs build.helper
    build_test: coverage report --rcfile=tools/coverage_unit_tests.rc
    # Create the report to upload
    build_test: coverage xml -i --rcfile=tools/coverage_system_tests.rc -o codegen.xml
    build_test: flake8 --config=./tox.ini build/
    test: python --version
    test: python -c "import platform; print(platform.architecture())"
    test: python -m pip install --upgrade pip
    test: python tools/install_local_wheel.py --driver nitclk
    test: coverage run --rcfile=tools/coverage_unit_tests.rc --source nifake -m py.test generated/nifake/nifake {posargs} -s
    test: coverage xml -i --rcfile=tools/coverage_system_tests.rc -o nifakeunittest.xml
    test: coverage run --rcfile=tools/coverage_unit_tests.rc --append --source nimodinst -m py.test generated/nimodinst/nimodinst {posargs} -s
    test: coverage xml -i --rcfile=tools/coverage_system_tests.rc -o nimodinstunittest.xml
    test: coverage run --rcfile=tools/coverage_unit_tests.rc --append --source nitclk -m py.test generated/nitclk/nitclk {posargs} -s
    test: coverage xml -i --rcfile=tools/coverage_system_tests.rc -o nitclkunittest.xml
    test: coverage report --rcfile=tools/coverage_unit_tests.rc
    test: coverage html --rcfile=tools/coverage_unit_tests.rc  --directory=generated/htmlcov/unit_tests
    clean: python --version
    clean: python -c "import platform; print(platform.architecture())"
    clean: make clean {posargs}
    codegen: python --version
    codegen: python -c "import platform; print(platform.architecture())"
    codegen: python -m pip install pip --upgrade pip
    codegen: make {posargs}
    installers: python --version
    installers: python -c "import platform; print(platform.architecture())"
    installers: python -m pip install pip --upgrade pip
    installers: make installers {posargs}
    flake8: python --version
    flake8: python -c "import platform; print(platform.architecture())"
    flake8: python -m pip install pip --upgrade pip
    flake8: flake8 --config=./tox.ini generated/
    flake8: flake8 --config=./tox.ini src/nimodinst/system_tests/
    flake8: flake8 --config=./tox.ini src/nimodinst/examples/
    flake8: flake8 --config=./tox.ini tools/
    docs: python --version
    docs: python -c "import platform; print(platform.architecture())"
    docs: sphinx-build -b html -d {envtmpdir}/doctrees . ../generated/docs/html {posargs}
    pkg: python --version
    pkg: python -c "import platform; print(platform.architecture())"
    pkg: python -m twine --version
    pkg: python -m twine check generated/nifake/dist/*
    pkg: python -m twine check generated/nidcpower/dist/*
    pkg: python -m twine check generated/nidigital/dist/*
    pkg: python -m twine check generated/nidmm/dist/*
    pkg: python -m twine check generated/nifgen/dist/*
    pkg: python -m twine check generated/niscope/dist/*
    pkg: python -m twine check generated/nise/dist/*
    pkg: python -m twine check generated/niswitch/dist/*
    # pkg: check-manifest --ignore tox.ini,tests*,.github,.github/*,CONTRIBUTING.rst,docs,docs/*
    nidcpower_system_tests: python --version
    nidcpower_system_tests: python -c "import platform; print(platform.architecture())"
    nidcpower_system_tests: python -m pytest src/nidcpower/system_tests --json=generated/kibana/nidcpower_system_test_result.json
    nidigital_system_tests: python --version
    nidigital_system_tests: python -c "import platform; print(platform.architecture())"
    nidigital_system_tests: python -m pytest src/nidigital/system_tests --json=generated/kibana/nidigital_system_test_result.json
    nidmm_system_tests: python --version
    nidmm_system_tests: python -c "import platform; print(platform.architecture())"
    nidmm_system_tests: python -m pytest src/nidmm/system_tests --json=generated/kibana/nidmm_system_test_result.json
    nifgen_system_tests: python --version
    nifgen_system_tests: python -c "import platform; print(platform.architecture())"
    nifgen_system_tests: python -m pytest src/nifgen/system_tests --json=generated/kibana/nifgen_system_test_result.json
    niswitch_system_tests: python --version
    niswitch_system_tests: python -c "import platform; print(platform.architecture())"
    niswitch_system_tests: python -m pytest src/niswitch/system_tests --json=generated/kibana/niswitch_system_test_result.json
    niscope_system_tests: python --version
    niscope_system_tests: python -c "import platform; print(platform.architecture())"
    niscope_system_tests: python -m pytest src/niscope/system_tests --json=generated/kibana/niscope_system_test_result.json
    nimodinst_system_tests: python --version
    nimodinst_system_tests: python -c "import platform; print(platform.architecture())"
    nimodinst_system_tests: python -m pytest src/nimodinst/system_tests --json=generated/kibana/nimodinst_system_test_result.json
    nise_system_tests: python --version
    nise_system_tests: python -c "import platform; print(platform.architecture())"
    nise_system_tests: python -m pytest src/nise/system_tests --json=generated/kibana/nise_system_test_result.json

deps =
    test: pytest==4.6.5;platform_python_implementation=='PyPy'
    test: pytest;platform_python_implementation=='CPython'
    test: coverage
    test: mock
    test: mako
    test: numpy
    build_test: pytest==4.6.5;platform_python_implementation=='PyPy'
    build_test: pytest;platform_python_implementation=='CPython'
    build_test: coverage
    build_test: mako
    build_test: flake8
    build_test: hacking
    build_test: pep8-naming
    codegen: mako
    codegen: packaging
    installers: wheel
    installers: setuptools
    installers: packaging
    flake8: flake8
    flake8: hacking
    flake8: pep8-naming
    docs: sphinx
    docs: sphinx-rtd-theme
    pkg: check-manifest
    pkg: docutils
    pkg: pygments
    pkg: twine
    nidcpower_system_tests: pytest==4.6.5;platform_python_implementation=='PyPy'
    nidcpower_system_tests: pytest;platform_python_implementation=='CPython'
    nidcpower_system_tests: nidcpower
    nidcpower_system_tests: pytest-json
    nidigital_system_tests: pytest
    nidigital_system_tests: nidigital
    nidigital_system_tests: pytest-json
    nidmm_system_tests: pytest==4.6.5;platform_python_implementation=='PyPy'
    nidmm_system_tests: pytest;platform_python_implementation=='CPython'
    nidmm_system_tests: nidmm
    nidmm_system_tests: pytest-json
    nidmm_system_tests: numpy
    nifgen_system_tests: pytest==4.6.5;platform_python_implementation=='PyPy'
    nifgen_system_tests: pytest;platform_python_implementation=='CPython'
    nifgen_system_tests: nifgen
    nifgen_system_tests: pytest-json
    nifgen_system_tests: numpy
    niscope_system_tests: pytest==4.6.5;platform_python_implementation=='PyPy'
    niscope_system_tests: pytest;platform_python_implementation=='CPython'
    niscope_system_tests: niscope
    niscope_system_tests: pytest-json
    niscope_system_tests: numpy
    niswitch_system_tests: pytest==4.6.5;platform_python_implementation=='PyPy'
    niswitch_system_tests: pytest;platform_python_implementation=='CPython'
    niswitch_system_tests: niswitch
    niswitch_system_tests: pytest-json
    nimodinst_system_tests: pytest==4.6.5;platform_python_implementation=='PyPy'
    nimodinst_system_tests: pytest;platform_python_implementation=='CPython'
    nimodinst_system_tests: nimodinst
    nimodinst_system_tests: pytest-json
    nise_system_tests: pytest==4.6.5;platform_python_implementation=='PyPy'
    nise_system_tests: pytest;platform_python_implementation=='CPython'
    nise_system_tests: nise
    nise_system_tests: pytest-json

whitelist_externals =
    build_test: mv
    test: mv
    codegen: make
    installers: make
    clean: make

[flake8]
show_source = true
# We recommend setting your editor's visual guide to 79 but allow overflow to
# 160 for readability in certain cases due to generated code
# max_line_length = 160
exclude = build,docs,.tox,__pycache__,processed_metadata,.eggs
# H903: Windows style line endings not allowed in code
# E501: Line length
# W391: Blank line at end of file
ignore = H903,E501,W391

[pytest]
addopts = --verbose --doctest-modules --ignore=setup.py
norecursedirs = system_tests examples .* build dist CVS _darcs {arch} *.egg venv
junit_suite_name = nimi-python
python_files = *.py



